;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; PACKED_VIEW_INDEX        0   x           0     NONE    uint       
; MACRO_TILE_INDEX         0    y          0     NONE    uint       
; SV_IsFrontFace           0     z         0    FFACE    uint       
; SV_Position              0   xyzw        1      POS   float   xy w
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
; SV_Target                1   xyzw        1   TARGET   float   xyzw
; SV_Target                2   xyzw        2   TARGET   float   xyzw
; SV_Target                3   xyzw        3   TARGET   float   xyzw
; SV_Target                5   xyzw        5   TARGET   float   xyzw
;
; shader hash: fd4345cf5f3262d6bf0df06868aa4406
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; PACKED_VIEW_INDEX        0        nointerpolation       
; MACRO_TILE_INDEX         0        nointerpolation       
; SV_Position              0          noperspective       
; SV_IsFrontFace           0        nointerpolation       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
; SV_Target                1                              
; SV_Target                2                              
; SV_Target                3                              
; SV_Target                5                              
;
; Buffer Definitions:
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2016
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2032
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2048
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2064
;       float4 View_ScreenToViewSpace;                ; Offset: 2080
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2096
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2104
;       int View_NumSceneColorMSAASamples;            ; Offset: 2112
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2116
;       float View_PreExposure;                       ; Offset: 2120
;       float View_OneOverPreExposure;                ; Offset: 2124
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2128
;       float4 View_SpecularOverrideParameter;        ; Offset: 2144
;       float4 View_NormalOverrideParameter;          ; Offset: 2160
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2176
;       float View_PrevFrameGameTime;                 ; Offset: 2184
;       float View_PrevFrameRealTime;                 ; Offset: 2188
;       float View_OutOfBoundsMask;                   ; Offset: 2192
;       float PrePadding_View_2196;                   ; Offset: 2196
;       float PrePadding_View_2200;                   ; Offset: 2200
;       float PrePadding_View_2204;                   ; Offset: 2204
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2208
;       float View_CullingSign;                       ; Offset: 2220
;       float View_NearPlane;                         ; Offset: 2224
;       float View_GameTime;                          ; Offset: 2228
;       float View_RealTime;                          ; Offset: 2232
;       float View_DeltaTime;                         ; Offset: 2236
;       float View_MaterialTextureMipBias;            ; Offset: 2240
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2244
;       uint View_Random;                             ; Offset: 2248
;       uint View_FrameNumber;                        ; Offset: 2252
;       uint View_FrameCounter;                       ; Offset: 2256
;       uint View_StateFrameIndexMod8;                ; Offset: 2260
;       uint View_StateFrameIndex;                    ; Offset: 2264
;       uint View_DebugViewModeMask;                  ; Offset: 2268
;       uint View_WorldIsPaused;                      ; Offset: 2272
;       float View_CameraCut;                         ; Offset: 2276
;       float View_UnlitViewmodeMask;                 ; Offset: 2280
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_DirectionalLightColor;            ; Offset: 2288
;       float3 View_DirectionalLightDirection;        ; Offset: 2304
;       float PrePadding_View_2316;                   ; Offset: 2316
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2320
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2352
;       float4 View_TemporalAAParams;                 ; Offset: 2384
;       float4 View_CircleDOFParams;                  ; Offset: 2400
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2416
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2420
;       float View_DepthOfFieldScale;                 ; Offset: 2424
;       float View_DepthOfFieldFocalLength;           ; Offset: 2428
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2432
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2436
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2440
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2444
;       float View_GeneralPurposeTweak;               ; Offset: 2448
;       float View_GeneralPurposeTweak2;              ; Offset: 2452
;       float View_DemosaicVposOffset;                ; Offset: 2456
;       float View_DecalDepthBias;                    ; Offset: 2460
;       float3 View_IndirectLightingColorScale;       ; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2496
;       float PrePadding_View_2508;                   ; Offset: 2508
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2512
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2544
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2576
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2608
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2640
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2672
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2688
;       float PrePadding_View_2700;                   ; Offset: 2700
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2704
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2720
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2784
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2800
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2804
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2808
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2812
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2816
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2832
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2836
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2840
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2844
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2848
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2852
;       float PrePadding_View_2856;                   ; Offset: 2856
;       float PrePadding_View_2860;                   ; Offset: 2860
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2864
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2876
;       float View_RealTimeReflectionCapture;         ; Offset: 2880
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2884
;       float PrePadding_View_2888;                   ; Offset: 2888
;       float PrePadding_View_2892;                   ; Offset: 2892
;       float4 View_AmbientCubemapTint;               ; Offset: 2896
;       float View_AmbientCubemapIntensity;           ; Offset: 2912
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2916
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2920
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2924
;       float4 View_SkyLightColor;                    ; Offset: 2928
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 2944
;       float View_MobilePreviewMode;                 ; Offset: 3072
;       float View_HMDEyePaddingOffset;               ; Offset: 3076
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3080
;       float View_ShowDecalsMask;                    ; Offset: 3084
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3088
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3092
;       float PrePadding_View_3096;                   ; Offset: 3096
;       float PrePadding_View_3100;                   ; Offset: 3100
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3104
;       int View_StereoPassIndex;                     ; Offset: 3116
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3120
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3216
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3312
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3408
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3504
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3508
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3512
;       int PrePadding_View_3516;                     ; Offset: 3516
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3520
;       float PrePadding_View_3532;                   ; Offset: 3532
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3536
;       float View_GlobalVolumeDimension;             ; Offset: 3548
;       float View_GlobalVolumeTexelSize;             ; Offset: 3552
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3556
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3560
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3564
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3568
;       float View_NotCoveredMinStepScale;            ; Offset: 3572
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3576
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3580
;       int2 View_CursorPosition;                     ; Offset: 3584
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3592
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3600
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3632
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 3640
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 3648
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 3656
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 3664
;       float2 View_VolumetricFogUVMax;               ; Offset: 3672
;       float View_VolumetricFogMaxDistance;          ; Offset: 3680
;       float PrePadding_View_3684;                   ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3696
;       float PrePadding_View_3708;                   ; Offset: 3708
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3712
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3728
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3740
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3744
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3756
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3760
;       float PrePadding_View_3764;                   ; Offset: 3764
;       float PrePadding_View_3768;                   ; Offset: 3768
;       float PrePadding_View_3772;                   ; Offset: 3772
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3776
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3808
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3812
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3816
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3820
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3824
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3828
;       uint PrePadding_View_3832;                    ; Offset: 3832
;       uint PrePadding_View_3836;                    ; Offset: 3836
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3840
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3856
;       float PrePadding_View_3864;                   ; Offset: 3864
;       float PrePadding_View_3868;                   ; Offset: 3868
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3872
;       float View_OverrideLandscapeLOD;              ; Offset: 3888
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3892
;       float View_MinRoughness;                      ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_HairRenderInfo;                   ; Offset: 3904
;       uint View_EnableSkyLight;                     ; Offset: 3920
;       uint View_HairRenderInfoBits;                 ; Offset: 3924
;       uint View_HairComponents;                     ; Offset: 3928
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3932
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3936
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3952
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 3968
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3984
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3996
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4000
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4004
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4008
;       int View_PhysicsFieldTargetCount;             ; Offset: 4012
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4016
;       uint View_GPUSceneViewId;                     ; Offset: 4528
;       float View_ViewResolutionFraction;            ; Offset: 4532
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4536
;       float PrePadding_View_4540;                   ; Offset: 4540
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4544
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 4560
;       float4 View_GlintLUTParameters0;              ; Offset: 4576
;       float4 View_GlintLUTParameters1;              ; Offset: 4592
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_GGXLTCMatTexture;  ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_GGXLTCAmpTexture;  ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessResource_View_SheenLTCTexture;   ; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint View_bShadingEnergyConservation;         ; Offset: 5160
;       uint View_bShadingEnergyPreservation;         ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessResource_View_GlintTexture;      ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessResource_View_SimpleVolumeTexture;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_SimpleVolumeEnvTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5264
;       uint PrePadding_View_5268;                    ; Offset: 5268
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessResource_View_SpecularProfileTexture;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_WaterData;         ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5328
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5344
;       float PrePadding_View_5348;                   ; Offset: 5348
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint PrePadding_View_5368;                    ; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5376
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5392
;       uint PrePadding_View_5396;                    ; Offset: 5396
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5400
;       uint PrePadding_View_5404;                    ; Offset: 5404
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5408
;       uint PrePadding_View_5412;                    ; Offset: 5412
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5416
;       uint PrePadding_View_5420;                    ; Offset: 5420
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5424
;       uint PrePadding_View_5428;                    ; Offset: 5428
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5432
;       uint PrePadding_View_5436;                    ; Offset: 5436
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5440
;       uint PrePadding_View_5444;                    ; Offset: 5444
;       uint PrePadding_View_5448;                    ; Offset: 5448
;       uint PrePadding_View_5452;                    ; Offset: 5452
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5456
;       float PrePadding_View_5468;                   ; Offset: 5468
;       float3 View_TLASViewTilePosition;             ; Offset: 5472
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5484
;
; }
;
; cbuffer UniformBufferConstants_Scene
; {
;
;   struct UniformBufferConstants_Scene
;   {
;
;       uint BindlessResource_Scene_GPUScene_GPUSceneInstanceSceneData;; Offset:    0
;       uint PrePadding_Scene_GPUScene_4;             ; Offset:    4
;       uint BindlessResource_Scene_GPUScene_GPUSceneInstancePayloadData;; Offset:    8
;       uint PrePadding_Scene_GPUScene_12;            ; Offset:   12
;       uint BindlessResource_Scene_GPUScene_GPUScenePrimitiveSceneData;; Offset:   16
;       uint PrePadding_Scene_GPUScene_20;            ; Offset:   20
;       uint BindlessResource_Scene_GPUScene_GPUSceneLightmapData;; Offset:   24
;       uint PrePadding_Scene_GPUScene_28;            ; Offset:   28
;       uint BindlessResource_Scene_GPUScene_GPUSceneLightData;; Offset:   32
;       uint PrePadding_Scene_GPUScene_36;            ; Offset:   36
;       uint Scene_GPUScene_InstanceDataSOAStride;    ; Offset:   40
;       uint Scene_GPUScene_GPUSceneFrameNumber;      ; Offset:   44
;       int Scene_GPUScene_NumInstances;              ; Offset:   48
;       int Scene_GPUScene_NumScenePrimitives;        ; Offset:   52
;   
;   } UniformBufferConstants_Scene;                   ; Offset:    0 Size:    56
;
; }
;
; cbuffer UniformBufferConstants_Nanite
; {
;
;   struct UniformBufferConstants_Nanite
;   {
;
;       int4 Nanite_PageConstants;                    ; Offset:    0
;       int4 Nanite_MaterialConfig;                   ; Offset:   16
;       uint Nanite_MaxNodes;                         ; Offset:   32
;       uint Nanite_MaxVisibleClusters;               ; Offset:   36
;       uint Nanite_RenderFlags;                      ; Offset:   40
;       float Nanite_RayTracingCutError;              ; Offset:   44
;       float4 Nanite_RectScaleOffset;                ; Offset:   48
;       uint BindlessResource_Nanite_ClusterPageData; ; Offset:   64
;       uint PrePadding_Nanite_68;                    ; Offset:   68
;       uint BindlessResource_Nanite_VisibleClustersSWHW;; Offset:   72
;       uint PrePadding_Nanite_76;                    ; Offset:   76
;       uint BindlessResource_Nanite_HierarchyBuffer; ; Offset:   80
;       uint PrePadding_Nanite_84;                    ; Offset:   84
;       uint BindlessResource_Nanite_MaterialTileRemap;; Offset:   88
;       uint PrePadding_Nanite_92;                    ; Offset:   92
;       uint BindlessResource_Nanite_MaterialDepthTable;; Offset:   96
;       uint PrePadding_Nanite_100;                   ; Offset:  100
;       uint BindlessResource_Nanite_ShadingMask;     ; Offset:  104
;       uint PrePadding_Nanite_108;                   ; Offset:  108
;       uint BindlessResource_Nanite_VisBuffer64;     ; Offset:  112
;       uint PrePadding_Nanite_116;                   ; Offset:  116
;       uint BindlessResource_Nanite_DbgBuffer64;     ; Offset:  120
;       uint PrePadding_Nanite_124;                   ; Offset:  124
;       uint BindlessResource_Nanite_DbgBuffer32;     ; Offset:  128
;       uint PrePadding_Nanite_132;                   ; Offset:  132
;       uint BindlessResource_Nanite_RayTracingDataBuffer;; Offset:  136
;       uint PrePadding_Nanite_140;                   ; Offset:  140
;       uint BindlessResource_Nanite_ShadingBinMeta;  ; Offset:  144
;       uint PrePadding_Nanite_148;                   ; Offset:  148
;       uint BindlessResource_Nanite_ShadingBinData;  ; Offset:  152
;       uint PrePadding_Nanite_156;                   ; Offset:  156
;       uint Nanite_MultiViewEnabled;                 ; Offset:  160
;       uint PrePadding_Nanite_164;                   ; Offset:  164
;       uint BindlessResource_Nanite_MultiViewIndices;; Offset:  168
;       uint PrePadding_Nanite_172;                   ; Offset:  172
;       uint BindlessResource_Nanite_MultiViewRectScaleOffsets;; Offset:  176
;       uint PrePadding_Nanite_180;                   ; Offset:  180
;       uint BindlessResource_Nanite_InViews;         ; Offset:  184
;   
;   } UniformBufferConstants_Nanite;                  ; Offset:    0 Size:   188
;
; }
;
; cbuffer UniformBufferConstants_Material
; {
;
;   struct UniformBufferConstants_Material
;   {
;
;       float4 Material_PreshaderBuffer[9];           ; Offset:    0
;       uint BindlessResource_Material_Texture2D_0;   ; Offset:  144
;       uint PrePadding_Material_148;                 ; Offset:  148
;       uint BindlessSampler_Material_Texture2D_0Sampler;; Offset:  152
;       uint PrePadding_Material_156;                 ; Offset:  156
;       uint BindlessResource_Material_Texture2D_1;   ; Offset:  160
;       uint PrePadding_Material_164;                 ; Offset:  164
;       uint BindlessSampler_Material_Texture2D_1Sampler;; Offset:  168
;       uint PrePadding_Material_172;                 ; Offset:  172
;       uint BindlessResource_Material_Texture2D_2;   ; Offset:  176
;       uint PrePadding_Material_180;                 ; Offset:  180
;       uint BindlessSampler_Material_Texture2D_2Sampler;; Offset:  184
;       uint PrePadding_Material_188;                 ; Offset:  188
;       uint BindlessResource_Material_Texture2D_3;   ; Offset:  192
;       uint PrePadding_Material_196;                 ; Offset:  196
;       uint BindlessSampler_Material_Texture2D_3Sampler;; Offset:  200
;       uint PrePadding_Material_204;                 ; Offset:  204
;       uint BindlessResource_Material_Texture2D_4;   ; Offset:  208
;       uint PrePadding_Material_212;                 ; Offset:  212
;       uint BindlessSampler_Material_Texture2D_4Sampler;; Offset:  216
;       uint PrePadding_Material_220;                 ; Offset:  220
;       uint BindlessResource_Material_Texture2D_5;   ; Offset:  224
;       uint PrePadding_Material_228;                 ; Offset:  228
;       uint BindlessSampler_Material_Texture2D_5Sampler;; Offset:  232
;       uint PrePadding_Material_236;                 ; Offset:  236
;       uint BindlessResource_Material_Texture2D_6;   ; Offset:  240
;       uint PrePadding_Material_244;                 ; Offset:  244
;       uint BindlessSampler_Material_Texture2D_6Sampler;; Offset:  248
;       uint PrePadding_Material_252;                 ; Offset:  252
;       uint BindlessResource_Material_Texture2D_7;   ; Offset:  256
;       uint PrePadding_Material_260;                 ; Offset:  260
;       uint BindlessSampler_Material_Texture2D_7Sampler;; Offset:  264
;       uint PrePadding_Material_268;                 ; Offset:  268
;       uint BindlessResource_Material_Texture2D_8;   ; Offset:  272
;       uint PrePadding_Material_276;                 ; Offset:  276
;       uint BindlessSampler_Material_Texture2D_8Sampler;; Offset:  280
;       uint PrePadding_Material_284;                 ; Offset:  284
;       uint BindlessResource_Material_Texture2D_9;   ; Offset:  288
;       uint PrePadding_Material_292;                 ; Offset:  292
;       uint BindlessSampler_Material_Texture2D_9Sampler;; Offset:  296
;       uint PrePadding_Material_300;                 ; Offset:  300
;       uint BindlessResource_Material_Texture2D_10;  ; Offset:  304
;       uint PrePadding_Material_308;                 ; Offset:  308
;       uint BindlessSampler_Material_Texture2D_10Sampler;; Offset:  312
;       uint PrePadding_Material_316;                 ; Offset:  316
;       uint BindlessResource_Material_Texture2D_11;  ; Offset:  320
;       uint PrePadding_Material_324;                 ; Offset:  324
;       uint BindlessSampler_Material_Texture2D_11Sampler;; Offset:  328
;       uint PrePadding_Material_332;                 ; Offset:  332
;       uint BindlessResource_Material_Texture2D_12;  ; Offset:  336
;       uint PrePadding_Material_340;                 ; Offset:  340
;       uint BindlessSampler_Material_Texture2D_12Sampler;; Offset:  344
;       uint PrePadding_Material_348;                 ; Offset:  348
;       uint BindlessResource_Material_Texture2D_13;  ; Offset:  352
;       uint PrePadding_Material_356;                 ; Offset:  356
;       uint BindlessSampler_Material_Texture2D_13Sampler;; Offset:  360
;       uint PrePadding_Material_364;                 ; Offset:  364
;       uint BindlessResource_Material_Texture2D_14;  ; Offset:  368
;       uint PrePadding_Material_372;                 ; Offset:  372
;       uint BindlessSampler_Material_Texture2D_14Sampler;; Offset:  376
;       uint PrePadding_Material_380;                 ; Offset:  380
;       uint BindlessResource_Material_Texture2D_15;  ; Offset:  384
;       uint PrePadding_Material_388;                 ; Offset:  388
;       uint BindlessSampler_Material_Texture2D_15Sampler;; Offset:  392
;       uint PrePadding_Material_396;                 ; Offset:  396
;       uint BindlessResource_Material_Texture2D_16;  ; Offset:  400
;       uint PrePadding_Material_404;                 ; Offset:  404
;       uint BindlessSampler_Material_Texture2D_16Sampler;; Offset:  408
;       uint PrePadding_Material_412;                 ; Offset:  412
;       uint BindlessSampler_Material_Wrap_WorldGroupSettings;; Offset:  416
;       uint PrePadding_Material_420;                 ; Offset:  420
;       uint BindlessSampler_Material_Clamp_WorldGroupSettings;; Offset:  424
;   
;   } UniformBufferConstants_Material;                ; Offset:    0 Size:   428
;
; }
;
; Resource bind info for Scene_GPUScene_GPUSceneInstanceSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for Scene_GPUScene_GPUScenePrimitiveSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; UniformBufferConstants_View       cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_Scene      cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_Nanite     cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_Material   cbuffer      NA          NA     CB3            cb3     1
; View_SharedBilinearClampedSampler   sampler      NA          NA      S0             s0     1
; View_LandscapeWeightmapSampler    sampler      NA          NA      S1             s1     1
; OpaqueBasePass_DBufferATextureSampler   sampler      NA          NA      S2             s2     1
; Material_Texture2D_2Sampler       sampler      NA          NA      S3             s3     1
; Material_Texture2D_3Sampler       sampler      NA          NA      S4             s4     1
; Material_Texture2D_4Sampler       sampler      NA          NA      S5             s5     1
; Material_Texture2D_5Sampler       sampler      NA          NA      S6             s6     1
; Material_Texture2D_6Sampler       sampler      NA          NA      S7             s7     1
; Material_Texture2D_7Sampler       sampler      NA          NA      S8             s8     1
; Material_Texture2D_8Sampler       sampler      NA          NA      S9             s9     1
; Material_Texture2D_9Sampler       sampler      NA          NA     S10            s10     1
; Material_Texture2D_10Sampler      sampler      NA          NA     S11            s11     1
; Material_Texture2D_11Sampler      sampler      NA          NA     S12            s12     1
; Material_Texture2D_12Sampler      sampler      NA          NA     S13            s13     1
; Material_Texture2D_13Sampler      sampler      NA          NA     S14            s14     1
; Material_Texture2D_14Sampler      sampler      NA          NA     S15            s15     1
; Material_Texture2D_15Sampler      sampler      NA          NA     S16            s16     1
; Material_Texture2D_16Sampler      sampler      NA          NA     S17            s17     1
; View_VolumetricLightmapIndirectionTexture   texture     u32          3d      T0             t0     1
; View_DirectionalLightShadowingBrickTexture   texture     f32          3d      T1             t1     1
; Scene_GPUScene_GPUSceneInstanceSceneData   texture  struct         r/o      T2             t2     1
; Scene_GPUScene_GPUScenePrimitiveSceneData   texture  struct         r/o      T3             t3     1
; OpaqueBasePass_DBufferATexture    texture     f32          2d      T4             t4     1
; OpaqueBasePass_DBufferBTexture    texture     f32          2d      T5             t5     1
; OpaqueBasePass_DBufferCTexture    texture     f32          2d      T6             t6     1
; Nanite_ClusterPageData            texture    byte         r/o      T7             t7     1
; Nanite_VisibleClustersSWHW        texture    byte         r/o      T8             t8     1
; Nanite_VisBuffer64                texture     u32          2d      T9             t9     1
; Material_Texture2D_0              texture     f32          2d     T10            t10     1
; Material_Texture2D_1              texture     f32          2d     T11            t11     1
; Material_Texture2D_2              texture     f32          2d     T12            t12     1
; Material_Texture2D_3              texture     f32          2d     T13            t13     1
; Material_Texture2D_4              texture     f32          2d     T14            t14     1
; Material_Texture2D_5              texture     f32          2d     T15            t15     1
; Material_Texture2D_6              texture     f32          2d     T16            t16     1
; Material_Texture2D_7              texture     f32          2d     T17            t17     1
; Material_Texture2D_8              texture     f32          2d     T18            t18     1
; Material_Texture2D_9              texture     f32          2d     T19            t19     1
; Material_Texture2D_10             texture     f32          2d     T20            t20     1
; Material_Texture2D_11             texture     f32          2d     T21            t21     1
; Material_Texture2D_12             texture     f32          2d     T22            t22     1
; Material_Texture2D_13             texture     f32          2d     T23            t23     1
; Material_Texture2D_14             texture     f32          2d     T24            t24     1
; Material_Texture2D_15             texture     f32          2d     T25            t25     1
; Material_Texture2D_16             texture     f32          2d     T26            t26     1
;
;
; ViewId state:
;
; Number of inputs: 8, outputs: 24
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5, 7 }
;   output 1 depends on inputs: { 4, 5, 7 }
;   output 2 depends on inputs: { 4, 5, 7 }
;   output 4 depends on inputs: { 4, 5, 7 }
;   output 5 depends on inputs: { 4, 5, 7 }
;   output 6 depends on inputs: { 4, 5, 7 }
;   output 7 depends on inputs: { 4, 5 }
;   output 8 depends on inputs: { 4, 5 }
;   output 9 depends on inputs: { 4, 5 }
;   output 10 depends on inputs: { 4, 5, 7 }
;   output 12 depends on inputs: { 4, 5, 7 }
;   output 13 depends on inputs: { 4, 5, 7 }
;   output 14 depends on inputs: { 4, 5, 7 }
;   output 15 depends on inputs: { 4, 5 }
;   output 20 depends on inputs: { 4, 5, 7 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture3D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture3D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture3D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.Texture2D<unsigned long long>" = type { i64, %"class.Texture2D<unsigned long long>::mips_type" }
%"class.Texture2D<unsigned long long>::mips_type" = type { i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_Scene = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_Nanite = type { <4 x i32>, <4 x i32>, i32, i32, i32, float, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_Material = type { [9 x <4 x float>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @MainPS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 26, i32 26, i32 0, i8 0 }, i32 26, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 25, i32 25, i32 0, i8 0 }, i32 25, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 24, i32 24, i32 0, i8 0 }, i32 24, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 23, i32 23, i32 0, i8 0 }, i32 23, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 22, i32 22, i32 0, i8 0 }, i32 22, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 0 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 3 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 3 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 3 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 3 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 3 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 3 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 3 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 3 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %36 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 3 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %37 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 3 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %38 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 3 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %39 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 3 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %40 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %41 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %42 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %43 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %44 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %45 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %46 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %47 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %48 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %49 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %50 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %46, %dx.types.ResourceProperties { i32 13, i32 428 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %51 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %48, %dx.types.ResourceProperties { i32 13, i32 56 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %52 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %49, %dx.types.ResourceProperties { i32 13, i32 5484 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %53 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %54 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %55 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %56 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %51, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %57 = extractvalue %dx.types.CBufRet.i32 %56, 2
  %58 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %59 = extractvalue %dx.types.CBufRet.f32 %58, 0
  %60 = extractvalue %dx.types.CBufRet.f32 %58, 1
  %61 = extractvalue %dx.types.CBufRet.f32 %58, 2
  %62 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %63 = extractvalue %dx.types.CBufRet.f32 %62, 0
  %64 = extractvalue %dx.types.CBufRet.f32 %62, 1
  %65 = extractvalue %dx.types.CBufRet.f32 %62, 2
  %66 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 135)  ; CBufferLoadLegacy(handle,regIndex)
  %67 = extractvalue %dx.types.CBufRet.f32 %66, 0
  %68 = extractvalue %dx.types.CBufRet.f32 %66, 1
  %69 = extractvalue %dx.types.CBufRet.f32 %66, 2
  %70 = extractvalue %dx.types.CBufRet.f32 %66, 3
  %71 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %72 = extractvalue %dx.types.CBufRet.f32 %71, 0
  %73 = extractvalue %dx.types.CBufRet.f32 %71, 1
  %74 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 44)  ; CBufferLoadLegacy(handle,regIndex)
  %75 = extractvalue %dx.types.CBufRet.f32 %74, 0
  %76 = extractvalue %dx.types.CBufRet.f32 %74, 1
  %77 = extractvalue %dx.types.CBufRet.f32 %74, 2
  %78 = extractvalue %dx.types.CBufRet.f32 %74, 3
  %79 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 45)  ; CBufferLoadLegacy(handle,regIndex)
  %80 = extractvalue %dx.types.CBufRet.f32 %79, 0
  %81 = extractvalue %dx.types.CBufRet.f32 %79, 1
  %82 = extractvalue %dx.types.CBufRet.f32 %79, 2
  %83 = extractvalue %dx.types.CBufRet.f32 %79, 3
  %84 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 46)  ; CBufferLoadLegacy(handle,regIndex)
  %85 = extractvalue %dx.types.CBufRet.f32 %84, 0
  %86 = extractvalue %dx.types.CBufRet.f32 %84, 1
  %87 = extractvalue %dx.types.CBufRet.f32 %84, 2
  %88 = extractvalue %dx.types.CBufRet.f32 %84, 3
  %89 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 47)  ; CBufferLoadLegacy(handle,regIndex)
  %90 = extractvalue %dx.types.CBufRet.f32 %89, 0
  %91 = extractvalue %dx.types.CBufRet.f32 %89, 1
  %92 = extractvalue %dx.types.CBufRet.f32 %89, 2
  %93 = extractvalue %dx.types.CBufRet.f32 %89, 3
  %94 = fadd fast float %53, -5.000000e-01
  %95 = fadd fast float %54, -5.000000e-01
  %96 = fptoui float %94 to i32
  %97 = fptoui float %95 to i32
  %98 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %99 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %98, i32 0, i32 %96, i32 %97, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %100 = extractvalue %dx.types.ResRet.i32 %99, 0
  %101 = extractvalue %dx.types.ResRet.i32 %99, 1
  %102 = lshr i32 %100, 7
  %103 = bitcast i32 %101 to float
  %104 = icmp eq i32 %102, 0
  br i1 %104, label %1814, label %105

; <label>:105                                     ; preds = %0
  %106 = and i32 %100, 127
  %107 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %47, %dx.types.ResourceProperties { i32 13, i32 188 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %108 = shl nuw nsw i32 %102, 3
  %109 = add nsw i32 %108, -8
  %110 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %111 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %110, i32 %109, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %112 = extractvalue %dx.types.ResRet.i32 %111, 0
  %113 = extractvalue %dx.types.ResRet.i32 %111, 1
  %114 = lshr i32 %112, 16
  %115 = and i32 %113, 16777215
  %116 = lshr i32 %113, 24
  %117 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %118 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %117, i32 %115, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %119 = extractvalue %dx.types.ResRet.f32 %118, 0
  %120 = bitcast float %119 to i32
  %121 = and i32 %120, 1048575
  %122 = mul nuw nsw i32 %121, 41
  %123 = add nuw nsw i32 %122, 1
  %124 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %125 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %124, i32 %123, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %126 = extractvalue %dx.types.ResRet.f32 %125, 0
  %127 = extractvalue %dx.types.ResRet.f32 %125, 1
  %128 = extractvalue %dx.types.ResRet.f32 %125, 2
  %129 = add i32 %115, %57
  %130 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %117, i32 %129, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %131 = extractvalue %dx.types.ResRet.f32 %130, 0
  %132 = extractvalue %dx.types.ResRet.f32 %130, 1
  %133 = extractvalue %dx.types.ResRet.f32 %130, 2
  %134 = extractvalue %dx.types.ResRet.f32 %130, 3
  %135 = bitcast float %131 to i32
  %136 = bitcast float %132 to i32
  %137 = bitcast float %133 to i32
  %138 = bitcast float %134 to i32
  %139 = shl i32 %57, 1
  %140 = add i32 %115, %139
  %141 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %117, i32 %140, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %142 = extractvalue %dx.types.ResRet.f32 %141, 0
  %143 = extractvalue %dx.types.ResRet.f32 %141, 1
  %144 = extractvalue %dx.types.ResRet.f32 %141, 2
  %145 = and i32 %135, 65535
  %146 = uitofp i32 %145 to float
  %147 = lshr i32 %135, 16
  %148 = uitofp i32 %147 to float
  %149 = and i32 %136, 32767
  %150 = uitofp i32 %149 to float
  %151 = fadd fast float %146, -3.276800e+04
  %152 = fadd fast float %148, -3.276800e+04
  %153 = fadd fast float %150, -1.638400e+04
  %154 = fmul fast float %153, 0x3F06A0F8E0000000
  %155 = and i32 %136, 32768
  %156 = icmp ne i32 %155, 0
  %157 = fadd fast float %151, %152
  %158 = fmul fast float %157, 0x3F00002000000000
  %159 = fsub fast float %151, %152
  %160 = fmul fast float %159, 0x3F00002000000000
  %161 = call float @dx.op.unary.f32(i32 6, float %158)  ; FAbs(value)
  %162 = call float @dx.op.unary.f32(i32 6, float %160)  ; FAbs(value)
  %163 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %161, float %162)  ; Dot2(ax,ay,bx,by)
  %164 = fsub fast float 2.000000e+00, %163
  %165 = call float @dx.op.dot3.f32(i32 55, float %158, float %160, float %164, float %158, float %160, float %164)  ; Dot3(ax,ay,az,bx,by,bz)
  %166 = call float @dx.op.unary.f32(i32 25, float %165)  ; Rsqrt(value)
  %167 = fmul fast float %166, %158
  %168 = fmul fast float %166, %160
  %169 = fmul fast float %166, %164
  %170 = fadd fast float %169, 1.000000e+00
  %171 = fdiv fast float 1.000000e+00, %170
  %172 = fmul fast float %168, %167
  %173 = fmul fast float %172, %171
  %174 = fsub fast float -0.000000e+00, %173
  %175 = fmul fast float %167, %167
  %176 = fmul fast float %175, %171
  %177 = fsub fast float 1.000000e+00, %176
  %178 = fmul fast float %168, %168
  %179 = fmul fast float %178, %171
  %180 = fsub fast float 1.000000e+00, %179
  %181 = fmul fast float %154, %154
  %182 = fsub fast float 1.000000e+00, %181
  %183 = call float @dx.op.unary.f32(i32 24, float %182)  ; Sqrt(value)
  %184 = select i1 %156, float %154, float %183
  %185 = select i1 %156, float %183, float %154
  %186 = fmul fast float %177, %184
  %187 = fmul fast float %184, %174
  %188 = fmul fast float %184, %167
  %189 = fmul fast float %185, %174
  %190 = fmul fast float %180, %185
  %191 = fmul fast float %168, %185
  %192 = fsub fast float -0.000000e+00, %191
  %193 = fadd fast float %186, %189
  %194 = fadd fast float %187, %190
  %195 = fsub fast float %192, %188
  %196 = fmul fast float %195, %168
  %197 = fmul fast float %194, %169
  %198 = fsub fast float %196, %197
  %199 = fmul fast float %193, %169
  %200 = fmul fast float %195, %167
  %201 = fsub fast float %199, %200
  %202 = fmul fast float %194, %167
  %203 = fmul fast float %193, %168
  %204 = fsub fast float %202, %203
  %205 = lshr i32 %138, 16
  %206 = shl i32 %205, 23
  %207 = add i32 %206, -125829120
  %208 = bitcast i32 %207 to float
  %209 = lshr i32 %137, 16
  %210 = and i32 %137, 65535
  %211 = and i32 %138, 65535
  %212 = uitofp i32 %210 to float
  %213 = uitofp i32 %209 to float
  %214 = uitofp i32 %211 to float
  %215 = fadd fast float %212, -3.276800e+04
  %216 = fadd fast float %213, -3.276800e+04
  %217 = fadd fast float %214, -3.276800e+04
  %218 = fmul fast float %208, %215
  %219 = fmul fast float %208, %216
  %220 = fmul fast float %208, %217
  %221 = fmul fast float %193, %218
  %222 = fmul fast float %194, %218
  %223 = fmul fast float %195, %218
  %224 = fmul fast float %198, %219
  %225 = fmul fast float %201, %219
  %226 = fmul fast float %204, %219
  %227 = fmul fast float %167, %220
  %228 = fmul fast float %168, %220
  %229 = fmul fast float %169, %220
  %230 = call float @dx.op.unary.f32(i32 6, float %218)  ; FAbs(value)
  %231 = call float @dx.op.unary.f32(i32 6, float %219)  ; FAbs(value)
  %232 = call float @dx.op.unary.f32(i32 6, float %220)  ; FAbs(value)
  %233 = fdiv fast float 1.000000e+00, %230
  %234 = fdiv fast float 1.000000e+00, %231
  %235 = fdiv fast float 1.000000e+00, %232
  %236 = fmul fast float %233, %233
  %237 = fmul fast float %221, %236
  %238 = fmul fast float %222, %236
  %239 = fmul fast float %236, %223
  %240 = fmul fast float %234, %234
  %241 = fmul fast float %224, %240
  %242 = fmul fast float %225, %240
  %243 = fmul fast float %226, %240
  %244 = fmul fast float %235, %235
  %245 = fmul fast float %244, %227
  %246 = fmul fast float %244, %228
  %247 = fmul fast float %244, %229
  %248 = fsub fast float -0.000000e+00, %142
  %249 = fsub fast float -0.000000e+00, %143
  %250 = fsub fast float -0.000000e+00, %144
  %251 = fmul fast float %237, %248
  %252 = call float @dx.op.tertiary.f32(i32 46, float %249, float %238, float %251)  ; FMad(a,b,c)
  %253 = call float @dx.op.tertiary.f32(i32 46, float %250, float %239, float %252)  ; FMad(a,b,c)
  %254 = fmul fast float %241, %248
  %255 = call float @dx.op.tertiary.f32(i32 46, float %249, float %242, float %254)  ; FMad(a,b,c)
  %256 = call float @dx.op.tertiary.f32(i32 46, float %250, float %243, float %255)  ; FMad(a,b,c)
  %257 = fmul fast float %245, %248
  %258 = call float @dx.op.tertiary.f32(i32 46, float %249, float %246, float %257)  ; FMad(a,b,c)
  %259 = call float @dx.op.tertiary.f32(i32 46, float %250, float %247, float %258)  ; FMad(a,b,c)
  %260 = fsub fast float %126, %59
  %261 = fsub fast float %127, %60
  %262 = fsub fast float %128, %61
  %263 = fmul fast float %260, 2.097152e+06
  %264 = fmul fast float %261, 2.097152e+06
  %265 = fmul fast float %262, 2.097152e+06
  %266 = fadd fast float %263, %63
  %267 = fadd fast float %266, %142
  %268 = fadd fast float %264, %64
  %269 = fadd fast float %268, %143
  %270 = fadd fast float %265, %65
  %271 = fadd fast float %270, %144
  %272 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %107, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %273 = extractvalue %dx.types.CBufRet.i32 %272, 1
  %274 = call i32 @dx.op.binary.i32(i32 40, i32 %114, i32 %273)  ; UMin(a,b)
  %275 = shl i32 %274, 17
  %276 = sub nsw i32 %114, %273
  %277 = call i32 @dx.op.binary.i32(i32 37, i32 %276, i32 0)  ; IMax(a,b)
  %278 = shl i32 %277, 15
  %279 = add i32 %278, %275
  %280 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %281 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %280, i32 %279, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %282 = extractvalue %dx.types.ResRet.i32 %281, 0
  %283 = shl i32 %282, 4
  %284 = shl nuw nsw i32 %116, 4
  %285 = or i32 %279, %284
  %286 = add nsw i32 %285, 16
  %287 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %280, i32 %286, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %288 = extractvalue %dx.types.ResRet.i32 %287, 0
  %289 = extractvalue %dx.types.ResRet.i32 %287, 1
  %290 = extractvalue %dx.types.ResRet.i32 %287, 3
  %291 = add i32 %286, %283
  %292 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %280, i32 %291, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %293 = extractvalue %dx.types.ResRet.i32 %292, 0
  %294 = extractvalue %dx.types.ResRet.i32 %292, 1
  %295 = extractvalue %dx.types.ResRet.i32 %292, 2
  %296 = extractvalue %dx.types.ResRet.i32 %292, 3
  %297 = mul i32 %282, 80
  %298 = add i32 %286, %297
  %299 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %280, i32 %298, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %300 = extractvalue %dx.types.ResRet.i32 %299, 0
  %301 = extractvalue %dx.types.ResRet.i32 %299, 1
  %302 = extractvalue %dx.types.ResRet.i32 %299, 2
  %303 = lshr i32 %288, 9
  %304 = lshr i32 %289, 8
  %305 = and i32 %296, 15
  %306 = lshr i32 %296, 9
  %307 = and i32 %306, 31
  %308 = lshr i32 %296, 14
  %309 = and i32 %308, 31
  %310 = lshr i32 %296, 19
  %311 = and i32 %310, 31
  %312 = lshr i32 %296, 24
  %313 = and i32 %312, 15
  %314 = lshr i32 %296, 28
  %315 = and i32 %300, 4194303
  %316 = lshr i32 %300, 22
  %317 = and i32 %301, 4194303
  %318 = and i32 %301, 4194304
  %319 = icmp ne i32 %318, 0
  %320 = lshr i32 %301, 23
  %321 = and i32 %320, 7
  %322 = add nuw nsw i32 %305, 10
  %323 = mul nuw nsw i32 %322, %106
  %324 = add i32 %304, %279
  %325 = lshr i32 %323, 5
  %326 = shl nuw nsw i32 %325, 2
  %327 = add i32 %324, %326
  %328 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %280, i32 %327, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %329 = extractvalue %dx.types.ResRet.i32 %328, 0
  %330 = extractvalue %dx.types.ResRet.i32 %328, 1
  %331 = and i32 %323, 31
  %332 = lshr i32 %329, %331
  %333 = icmp ne i32 %331, 0
  %334 = sub nsw i32 0, %323
  %335 = and i32 %334, 31
  %336 = shl i32 %330, %335
  %337 = select i1 %333, i32 %336, i32 0
  %338 = or i32 %337, %332
  %339 = shl i32 1, %305
  %340 = add i32 %339, -1
  %341 = and i32 %338, %340
  %342 = lshr i32 %338, %305
  %343 = and i32 %342, 31
  %344 = add nuw nsw i32 %305, 5
  %345 = lshr i32 %338, %344
  %346 = and i32 %345, 31
  %347 = add i32 %343, %341
  %348 = add i32 %346, %341
  %349 = add nuw nsw i32 %307, %309
  %350 = add nuw nsw i32 %349, %311
  %351 = mul i32 %341, %350
  %352 = add i32 %303, %279
  %353 = lshr i32 %351, 5
  %354 = shl nuw nsw i32 %353, 2
  %355 = add i32 %352, %354
  %356 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %280, i32 %355, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %357 = extractvalue %dx.types.ResRet.i32 %356, 0
  %358 = extractvalue %dx.types.ResRet.i32 %356, 1
  %359 = extractvalue %dx.types.ResRet.i32 %356, 2
  %360 = and i32 %351, 31
  %361 = lshr i32 %357, %360
  %362 = icmp ne i32 %360, 0
  %363 = sub i32 0, %351
  %364 = and i32 %363, 31
  %365 = shl i32 %358, %364
  %366 = select i1 %362, i32 %365, i32 0
  %367 = or i32 %366, %361
  %368 = lshr i32 %358, %360
  %369 = shl i32 %359, %364
  %370 = select i1 %362, i32 %369, i32 0
  %371 = or i32 %370, %368
  %372 = shl i32 1, %307
  %373 = add i32 %372, -1
  %374 = and i32 %367, %373
  %375 = lshr i32 %367, %307
  %376 = icmp ne i32 %307, 0
  %377 = sub nsw i32 0, %306
  %378 = and i32 %377, 31
  %379 = shl i32 %371, %378
  %380 = select i1 %376, i32 %379, i32 0
  %381 = or i32 %380, %375
  %382 = lshr i32 %371, %307
  %383 = shl i32 1, %309
  %384 = add i32 %383, -1
  %385 = and i32 %381, %384
  %386 = lshr i32 %381, %309
  %387 = icmp ne i32 %309, 0
  %388 = sub nsw i32 0, %308
  %389 = and i32 %388, 31
  %390 = shl i32 %382, %389
  %391 = select i1 %387, i32 %390, i32 0
  %392 = or i32 %386, %391
  %393 = shl i32 1, %311
  %394 = add i32 %393, -1
  %395 = and i32 %392, %394
  %396 = shl i32 %296, 19
  %397 = and i32 %396, 260046848
  %398 = sub nsw i32 1132462080, %397
  %399 = bitcast i32 %398 to float
  %400 = add i32 %374, %293
  %401 = add i32 %385, %294
  %402 = add i32 %395, %295
  %403 = sitofp i32 %400 to float
  %404 = sitofp i32 %401 to float
  %405 = sitofp i32 %402 to float
  %406 = fmul fast float %403, %399
  %407 = fmul fast float %404, %399
  %408 = fmul fast float %405, %399
  %409 = mul i32 %347, %350
  %410 = lshr i32 %409, 5
  %411 = shl nuw nsw i32 %410, 2
  %412 = add i32 %352, %411
  %413 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %280, i32 %412, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %414 = extractvalue %dx.types.ResRet.i32 %413, 0
  %415 = extractvalue %dx.types.ResRet.i32 %413, 1
  %416 = extractvalue %dx.types.ResRet.i32 %413, 2
  %417 = and i32 %409, 31
  %418 = lshr i32 %414, %417
  %419 = icmp ne i32 %417, 0
  %420 = sub i32 0, %409
  %421 = and i32 %420, 31
  %422 = shl i32 %415, %421
  %423 = select i1 %419, i32 %422, i32 0
  %424 = or i32 %423, %418
  %425 = lshr i32 %415, %417
  %426 = shl i32 %416, %421
  %427 = select i1 %419, i32 %426, i32 0
  %428 = or i32 %427, %425
  %429 = and i32 %424, %373
  %430 = lshr i32 %424, %307
  %431 = shl i32 %428, %378
  %432 = select i1 %376, i32 %431, i32 0
  %433 = or i32 %432, %430
  %434 = lshr i32 %428, %307
  %435 = and i32 %433, %384
  %436 = lshr i32 %433, %309
  %437 = shl i32 %434, %389
  %438 = select i1 %387, i32 %437, i32 0
  %439 = or i32 %436, %438
  %440 = and i32 %439, %394
  %441 = add i32 %429, %293
  %442 = add i32 %435, %294
  %443 = add i32 %440, %295
  %444 = sitofp i32 %441 to float
  %445 = sitofp i32 %442 to float
  %446 = sitofp i32 %443 to float
  %447 = fmul fast float %444, %399
  %448 = fmul fast float %445, %399
  %449 = fmul fast float %446, %399
  %450 = mul i32 %348, %350
  %451 = lshr i32 %450, 5
  %452 = shl nuw nsw i32 %451, 2
  %453 = add i32 %352, %452
  %454 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %280, i32 %453, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %455 = extractvalue %dx.types.ResRet.i32 %454, 0
  %456 = extractvalue %dx.types.ResRet.i32 %454, 1
  %457 = extractvalue %dx.types.ResRet.i32 %454, 2
  %458 = and i32 %450, 31
  %459 = lshr i32 %455, %458
  %460 = icmp ne i32 %458, 0
  %461 = sub i32 0, %450
  %462 = and i32 %461, 31
  %463 = shl i32 %456, %462
  %464 = select i1 %460, i32 %463, i32 0
  %465 = or i32 %464, %459
  %466 = lshr i32 %456, %458
  %467 = shl i32 %457, %462
  %468 = select i1 %460, i32 %467, i32 0
  %469 = or i32 %468, %466
  %470 = and i32 %465, %373
  %471 = lshr i32 %465, %307
  %472 = shl i32 %469, %378
  %473 = select i1 %376, i32 %472, i32 0
  %474 = or i32 %473, %471
  %475 = lshr i32 %469, %307
  %476 = and i32 %474, %384
  %477 = lshr i32 %474, %309
  %478 = shl i32 %475, %389
  %479 = select i1 %387, i32 %478, i32 0
  %480 = or i32 %477, %479
  %481 = and i32 %480, %394
  %482 = add i32 %470, %293
  %483 = add i32 %476, %294
  %484 = add i32 %481, %295
  %485 = sitofp i32 %482 to float
  %486 = sitofp i32 %483 to float
  %487 = sitofp i32 %484 to float
  %488 = fmul fast float %485, %399
  %489 = fmul fast float %486, %399
  %490 = fmul fast float %487, %399
  %491 = add i32 %317, %279
  %492 = add i32 %315, %279
  %493 = and i32 %290, 15
  %494 = lshr i32 %290, 4
  %495 = and i32 %494, 15
  %496 = lshr i32 %290, 8
  %497 = and i32 %496, 15
  %498 = lshr i32 %290, 12
  %499 = and i32 %498, 15
  %500 = mul i32 %341, %316
  %501 = shl nuw nsw i32 %313, 1
  %502 = ashr i32 %500, 5
  %503 = shl nsw i32 %502, 2
  %504 = add i32 %503, %492
  %505 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %280, i32 %504, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %506 = extractvalue %dx.types.ResRet.i32 %505, 0
  %507 = extractvalue %dx.types.ResRet.i32 %505, 1
  %508 = extractvalue %dx.types.ResRet.i32 %505, 2
  %509 = extractvalue %dx.types.ResRet.i32 %505, 3
  %510 = and i32 %500, 31
  %511 = lshr i32 %506, %510
  %512 = icmp ne i32 %510, 0
  %513 = sub i32 0, %500
  %514 = and i32 %513, 31
  %515 = shl i32 %507, %514
  %516 = select i1 %512, i32 %515, i32 0
  %517 = or i32 %516, %511
  %518 = lshr i32 %507, %510
  %519 = shl i32 %508, %514
  %520 = select i1 %512, i32 %519, i32 0
  %521 = or i32 %520, %518
  %522 = lshr i32 %508, %510
  %523 = shl i32 %509, %514
  %524 = select i1 %512, i32 %523, i32 0
  %525 = or i32 %524, %522
  %526 = shl i32 1, %501
  %527 = add i32 %526, -1
  %528 = and i32 %517, %527
  %529 = shl i32 1, %313
  %530 = add i32 %529, -1
  %531 = and i32 %528, %530
  %532 = lshr i32 %528, %313
  %533 = and i32 %532, %530
  %534 = uitofp i32 %531 to float
  %535 = uitofp i32 %533 to float
  %536 = uitofp i32 %530 to float
  %537 = fdiv fast float 2.000000e+00, %536
  %538 = fmul fast float %534, %537
  %539 = fmul fast float %535, %537
  %540 = fadd fast float %538, -1.000000e+00
  %541 = fadd fast float %539, -1.000000e+00
  %542 = call float @dx.op.unary.f32(i32 6, float %540)  ; FAbs(value)
  %543 = fsub fast float 1.000000e+00, %542
  %544 = call float @dx.op.unary.f32(i32 6, float %541)  ; FAbs(value)
  %545 = fsub fast float %543, %544
  %546 = fsub fast float -0.000000e+00, %545
  %547 = call float @dx.op.unary.f32(i32 7, float %546)  ; Saturate(value)
  %548 = fsub fast float -0.000000e+00, %547
  %549 = fcmp fast oge float %540, 0.000000e+00
  %550 = fcmp fast oge float %541, 0.000000e+00
  %551 = select i1 %549, float %548, float %547
  %552 = select i1 %550, float %548, float %547
  %553 = fadd fast float %551, %540
  %554 = fadd fast float %552, %541
  %555 = call float @dx.op.dot3.f32(i32 55, float %553, float %554, float %545, float %553, float %554, float %545)  ; Dot3(ax,ay,az,bx,by,bz)
  %556 = call float @dx.op.unary.f32(i32 25, float %555)  ; Rsqrt(value)
  %557 = fmul fast float %553, %556
  %558 = fmul fast float %554, %556
  %559 = fmul fast float %556, %545
  %560 = add nuw nsw i32 %314, 1
  %561 = select i1 %319, i32 %560, i32 0
  %562 = add nsw i32 %500, %501
  %563 = lshr i32 %517, %501
  %564 = icmp ne i32 %313, 0
  %565 = sub nsw i32 0, %501
  %566 = and i32 %565, 30
  %567 = shl i32 %521, %566
  %568 = select i1 %564, i32 %567, i32 0
  %569 = or i32 %568, %563
  %570 = lshr i32 %521, %501
  %571 = shl i32 %525, %566
  %572 = select i1 %564, i32 %571, i32 0
  %573 = or i32 %572, %570
  %574 = shl i32 1, %561
  %575 = add i32 %574, -1
  %576 = and i32 %569, %575
  br i1 %319, label %577, label %614, !dx.controlflow.hints !82

; <label>:577                                     ; preds = %105
  %578 = shl i32 1, %314
  %579 = and i32 %576, %578
  %580 = icmp ne i32 %579, 0
  %581 = add i32 %578, -1
  %582 = and i32 %576, %581
  %583 = call float @dx.op.unary.f32(i32 6, float %559)  ; FAbs(value)
  %584 = call float @dx.op.unary.f32(i32 6, float %557)  ; FAbs(value)
  %585 = fcmp fast ogt float %583, %584
  %586 = select i1 %585, float %559, float %557
  %587 = select i1 %585, float %557, float %559
  %588 = fsub fast float -0.000000e+00, %558
  %589 = fmul fast float %587, %586
  %590 = fmul fast float %587, %588
  %591 = fmul fast float %586, %586
  %592 = fmul fast float %558, %588
  %593 = fsub fast float %591, %592
  %594 = call float @dx.op.dot2.f32(i32 54, float %588, float %586, float %588, float %586)  ; Dot2(ax,ay,bx,by)
  %595 = call float @dx.op.unary.f32(i32 25, float %594)  ; Rsqrt(value)
  %596 = uitofp i32 %582 to float
  %597 = uitofp i32 %578 to float
  %598 = fdiv fast float 0x401921FB60000000, %597
  %599 = fmul fast float %598, %596
  %600 = call float @dx.op.unary.f32(i32 12, float %599)  ; Cos(value)
  %601 = fmul fast float %600, %595
  %602 = fmul fast float %601, %588
  %603 = fmul fast float %601, %586
  %604 = call float @dx.op.unary.f32(i32 13, float %599)  ; Sin(value)
  %605 = fmul fast float %604, %595
  %606 = fmul fast float %589, %605
  %607 = fmul fast float %590, %605
  %608 = fmul fast float %605, %593
  %609 = fsub fast float %602, %606
  %610 = fadd fast float %607, %603
  %611 = select i1 %585, float %608, float %609
  %612 = select i1 %585, float %609, float %608
  %613 = select i1 %580, float -1.000000e+00, float 1.000000e+00
  br label %614

; <label>:614                                     ; preds = %577, %105
  %615 = phi float [ %611, %577 ], [ 0.000000e+00, %105 ]
  %616 = phi float [ %610, %577 ], [ 0.000000e+00, %105 ]
  %617 = phi float [ %612, %577 ], [ 0.000000e+00, %105 ]
  %618 = phi float [ %613, %577 ], [ 0.000000e+00, %105 ]
  %619 = add nuw nsw i32 %561, %493
  %620 = add nuw nsw i32 %619, %495
  %621 = add nsw i32 %620, %562
  %622 = and i32 %620, 31
  %623 = lshr i32 %569, %622
  %624 = icmp ne i32 %622, 0
  %625 = sub nsw i32 0, %620
  %626 = and i32 %625, 31
  %627 = shl i32 %573, %626
  %628 = select i1 %624, i32 %627, i32 0
  %629 = or i32 %628, %623
  %630 = add nuw nsw i32 %497, %499
  %631 = mul i32 %347, %316
  %632 = ashr i32 %631, 5
  %633 = shl nsw i32 %632, 2
  %634 = add i32 %633, %492
  %635 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %280, i32 %634, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %636 = extractvalue %dx.types.ResRet.i32 %635, 0
  %637 = extractvalue %dx.types.ResRet.i32 %635, 1
  %638 = extractvalue %dx.types.ResRet.i32 %635, 2
  %639 = extractvalue %dx.types.ResRet.i32 %635, 3
  %640 = and i32 %631, 31
  %641 = lshr i32 %636, %640
  %642 = icmp ne i32 %640, 0
  %643 = sub i32 0, %631
  %644 = and i32 %643, 31
  %645 = shl i32 %637, %644
  %646 = select i1 %642, i32 %645, i32 0
  %647 = or i32 %646, %641
  %648 = lshr i32 %637, %640
  %649 = shl i32 %638, %644
  %650 = select i1 %642, i32 %649, i32 0
  %651 = or i32 %650, %648
  %652 = lshr i32 %638, %640
  %653 = shl i32 %639, %644
  %654 = select i1 %642, i32 %653, i32 0
  %655 = or i32 %654, %652
  %656 = and i32 %647, %527
  %657 = and i32 %656, %530
  %658 = lshr i32 %656, %313
  %659 = and i32 %658, %530
  %660 = uitofp i32 %657 to float
  %661 = uitofp i32 %659 to float
  %662 = fmul fast float %660, %537
  %663 = fmul fast float %661, %537
  %664 = fadd fast float %662, -1.000000e+00
  %665 = fadd fast float %663, -1.000000e+00
  %666 = call float @dx.op.unary.f32(i32 6, float %664)  ; FAbs(value)
  %667 = fsub fast float 1.000000e+00, %666
  %668 = call float @dx.op.unary.f32(i32 6, float %665)  ; FAbs(value)
  %669 = fsub fast float %667, %668
  %670 = fsub fast float -0.000000e+00, %669
  %671 = call float @dx.op.unary.f32(i32 7, float %670)  ; Saturate(value)
  %672 = fsub fast float -0.000000e+00, %671
  %673 = fcmp fast oge float %664, 0.000000e+00
  %674 = fcmp fast oge float %665, 0.000000e+00
  %675 = select i1 %673, float %672, float %671
  %676 = select i1 %674, float %672, float %671
  %677 = fadd fast float %675, %664
  %678 = fadd fast float %676, %665
  %679 = call float @dx.op.dot3.f32(i32 55, float %677, float %678, float %669, float %677, float %678, float %669)  ; Dot3(ax,ay,az,bx,by,bz)
  %680 = call float @dx.op.unary.f32(i32 25, float %679)  ; Rsqrt(value)
  %681 = fmul fast float %677, %680
  %682 = fmul fast float %678, %680
  %683 = fmul fast float %680, %669
  %684 = add nsw i32 %631, %501
  %685 = lshr i32 %647, %501
  %686 = shl i32 %651, %566
  %687 = select i1 %564, i32 %686, i32 0
  %688 = or i32 %687, %685
  %689 = lshr i32 %651, %501
  %690 = shl i32 %655, %566
  %691 = select i1 %564, i32 %690, i32 0
  %692 = or i32 %691, %689
  %693 = and i32 %688, %575
  br i1 %319, label %694, label %731, !dx.controlflow.hints !82

; <label>:694                                     ; preds = %614
  %695 = shl i32 1, %314
  %696 = and i32 %693, %695
  %697 = icmp ne i32 %696, 0
  %698 = add i32 %695, -1
  %699 = and i32 %693, %698
  %700 = call float @dx.op.unary.f32(i32 6, float %683)  ; FAbs(value)
  %701 = call float @dx.op.unary.f32(i32 6, float %681)  ; FAbs(value)
  %702 = fcmp fast ogt float %700, %701
  %703 = select i1 %702, float %683, float %681
  %704 = select i1 %702, float %681, float %683
  %705 = fsub fast float -0.000000e+00, %682
  %706 = fmul fast float %704, %703
  %707 = fmul fast float %704, %705
  %708 = fmul fast float %703, %703
  %709 = fmul fast float %682, %705
  %710 = fsub fast float %708, %709
  %711 = call float @dx.op.dot2.f32(i32 54, float %705, float %703, float %705, float %703)  ; Dot2(ax,ay,bx,by)
  %712 = call float @dx.op.unary.f32(i32 25, float %711)  ; Rsqrt(value)
  %713 = uitofp i32 %699 to float
  %714 = uitofp i32 %695 to float
  %715 = fdiv fast float 0x401921FB60000000, %714
  %716 = fmul fast float %715, %713
  %717 = call float @dx.op.unary.f32(i32 12, float %716)  ; Cos(value)
  %718 = fmul fast float %717, %712
  %719 = fmul fast float %718, %705
  %720 = fmul fast float %718, %703
  %721 = call float @dx.op.unary.f32(i32 13, float %716)  ; Sin(value)
  %722 = fmul fast float %721, %712
  %723 = fmul fast float %706, %722
  %724 = fmul fast float %707, %722
  %725 = fmul fast float %722, %710
  %726 = fsub fast float %719, %723
  %727 = fadd fast float %724, %720
  %728 = select i1 %702, float %725, float %726
  %729 = select i1 %702, float %726, float %725
  %730 = select i1 %697, float -1.000000e+00, float 1.000000e+00
  br label %731

; <label>:731                                     ; preds = %694, %614
  %732 = phi float [ %728, %694 ], [ 0.000000e+00, %614 ]
  %733 = phi float [ %727, %694 ], [ 0.000000e+00, %614 ]
  %734 = phi float [ %729, %694 ], [ 0.000000e+00, %614 ]
  %735 = phi float [ %730, %694 ], [ 0.000000e+00, %614 ]
  %736 = add nsw i32 %620, %684
  %737 = and i32 %620, 31
  %738 = lshr i32 %688, %737
  %739 = icmp ne i32 %737, 0
  %740 = sub nsw i32 0, %620
  %741 = and i32 %740, 31
  %742 = shl i32 %692, %741
  %743 = select i1 %739, i32 %742, i32 0
  %744 = or i32 %743, %738
  %745 = mul i32 %348, %316
  %746 = ashr i32 %745, 5
  %747 = shl nsw i32 %746, 2
  %748 = add i32 %747, %492
  %749 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %280, i32 %748, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %750 = extractvalue %dx.types.ResRet.i32 %749, 0
  %751 = extractvalue %dx.types.ResRet.i32 %749, 1
  %752 = extractvalue %dx.types.ResRet.i32 %749, 2
  %753 = extractvalue %dx.types.ResRet.i32 %749, 3
  %754 = and i32 %745, 31
  %755 = lshr i32 %750, %754
  %756 = icmp ne i32 %754, 0
  %757 = sub i32 0, %745
  %758 = and i32 %757, 31
  %759 = shl i32 %751, %758
  %760 = select i1 %756, i32 %759, i32 0
  %761 = or i32 %760, %755
  %762 = lshr i32 %751, %754
  %763 = shl i32 %752, %758
  %764 = select i1 %756, i32 %763, i32 0
  %765 = or i32 %764, %762
  %766 = lshr i32 %752, %754
  %767 = shl i32 %753, %758
  %768 = select i1 %756, i32 %767, i32 0
  %769 = or i32 %768, %766
  %770 = and i32 %761, %527
  %771 = and i32 %770, %530
  %772 = lshr i32 %770, %313
  %773 = and i32 %772, %530
  %774 = uitofp i32 %771 to float
  %775 = uitofp i32 %773 to float
  %776 = fmul fast float %774, %537
  %777 = fmul fast float %775, %537
  %778 = fadd fast float %776, -1.000000e+00
  %779 = fadd fast float %777, -1.000000e+00
  %780 = call float @dx.op.unary.f32(i32 6, float %778)  ; FAbs(value)
  %781 = fsub fast float 1.000000e+00, %780
  %782 = call float @dx.op.unary.f32(i32 6, float %779)  ; FAbs(value)
  %783 = fsub fast float %781, %782
  %784 = fsub fast float -0.000000e+00, %783
  %785 = call float @dx.op.unary.f32(i32 7, float %784)  ; Saturate(value)
  %786 = fsub fast float -0.000000e+00, %785
  %787 = fcmp fast oge float %778, 0.000000e+00
  %788 = fcmp fast oge float %779, 0.000000e+00
  %789 = select i1 %787, float %786, float %785
  %790 = select i1 %788, float %786, float %785
  %791 = fadd fast float %789, %778
  %792 = fadd fast float %790, %779
  %793 = call float @dx.op.dot3.f32(i32 55, float %791, float %792, float %783, float %791, float %792, float %783)  ; Dot3(ax,ay,az,bx,by,bz)
  %794 = call float @dx.op.unary.f32(i32 25, float %793)  ; Rsqrt(value)
  %795 = fmul fast float %791, %794
  %796 = fmul fast float %792, %794
  %797 = fmul fast float %794, %783
  %798 = add nsw i32 %745, %501
  %799 = lshr i32 %761, %501
  %800 = shl i32 %765, %566
  %801 = select i1 %564, i32 %800, i32 0
  %802 = or i32 %801, %799
  %803 = lshr i32 %765, %501
  %804 = shl i32 %769, %566
  %805 = select i1 %564, i32 %804, i32 0
  %806 = or i32 %805, %803
  %807 = and i32 %802, %575
  br i1 %319, label %808, label %845, !dx.controlflow.hints !82

; <label>:808                                     ; preds = %731
  %809 = shl i32 1, %314
  %810 = and i32 %807, %809
  %811 = icmp ne i32 %810, 0
  %812 = add i32 %809, -1
  %813 = and i32 %807, %812
  %814 = call float @dx.op.unary.f32(i32 6, float %797)  ; FAbs(value)
  %815 = call float @dx.op.unary.f32(i32 6, float %795)  ; FAbs(value)
  %816 = fcmp fast ogt float %814, %815
  %817 = select i1 %816, float %797, float %795
  %818 = select i1 %816, float %795, float %797
  %819 = fsub fast float -0.000000e+00, %796
  %820 = fmul fast float %818, %817
  %821 = fmul fast float %818, %819
  %822 = fmul fast float %817, %817
  %823 = fmul fast float %796, %819
  %824 = fsub fast float %822, %823
  %825 = call float @dx.op.dot2.f32(i32 54, float %819, float %817, float %819, float %817)  ; Dot2(ax,ay,bx,by)
  %826 = call float @dx.op.unary.f32(i32 25, float %825)  ; Rsqrt(value)
  %827 = uitofp i32 %813 to float
  %828 = uitofp i32 %809 to float
  %829 = fdiv fast float 0x401921FB60000000, %828
  %830 = fmul fast float %829, %827
  %831 = call float @dx.op.unary.f32(i32 12, float %830)  ; Cos(value)
  %832 = fmul fast float %831, %826
  %833 = fmul fast float %832, %819
  %834 = fmul fast float %832, %817
  %835 = call float @dx.op.unary.f32(i32 13, float %830)  ; Sin(value)
  %836 = fmul fast float %835, %826
  %837 = fmul fast float %820, %836
  %838 = fmul fast float %821, %836
  %839 = fmul fast float %836, %824
  %840 = fsub fast float %833, %837
  %841 = fadd fast float %838, %834
  %842 = select i1 %816, float %839, float %840
  %843 = select i1 %816, float %840, float %839
  %844 = select i1 %811, float -1.000000e+00, float 1.000000e+00
  br label %845

; <label>:845                                     ; preds = %808, %731
  %846 = phi float [ %842, %808 ], [ 0.000000e+00, %731 ]
  %847 = phi float [ %841, %808 ], [ 0.000000e+00, %731 ]
  %848 = phi float [ %843, %808 ], [ 0.000000e+00, %731 ]
  %849 = phi float [ %844, %808 ], [ 0.000000e+00, %731 ]
  %850 = add nsw i32 %620, %798
  %851 = and i32 %620, 31
  %852 = lshr i32 %802, %851
  %853 = icmp ne i32 %851, 0
  %854 = sub nsw i32 0, %620
  %855 = and i32 %854, 31
  %856 = shl i32 %806, %855
  %857 = select i1 %853, i32 %856, i32 0
  %858 = or i32 %857, %852
  %859 = and i32 %302, 15
  %860 = lshr i32 %302, 4
  %861 = and i32 %860, 15
  %862 = lshr i32 %629, %630
  %863 = shl i32 1, %859
  %864 = add i32 %863, -1
  %865 = and i32 %862, %864
  %866 = add nuw nsw i32 %630, %859
  %867 = add nsw i32 %866, %621
  %868 = ashr i32 %867, 5
  %869 = shl nsw i32 %868, 2
  %870 = add i32 %869, %492
  %871 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %872 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %871, i32 %870, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %873 = extractvalue %dx.types.ResRet.i32 %872, 0
  %874 = extractvalue %dx.types.ResRet.i32 %872, 1
  %875 = extractvalue %dx.types.ResRet.i32 %872, 2
  %876 = extractvalue %dx.types.ResRet.i32 %872, 3
  %877 = and i32 %867, 31
  %878 = lshr i32 %873, %877
  %879 = icmp ne i32 %877, 0
  %880 = sub i32 0, %867
  %881 = and i32 %880, 31
  %882 = shl i32 %874, %881
  %883 = select i1 %879, i32 %882, i32 0
  %884 = or i32 %883, %878
  %885 = lshr i32 %874, %877
  %886 = shl i32 %875, %881
  %887 = select i1 %879, i32 %886, i32 0
  %888 = or i32 %887, %885
  %889 = lshr i32 %875, %877
  %890 = shl i32 %876, %881
  %891 = select i1 %879, i32 %890, i32 0
  %892 = or i32 %891, %889
  %893 = shl i32 1, %861
  %894 = add i32 %893, -1
  %895 = and i32 %884, %894
  %896 = lshr i32 %744, %630
  %897 = and i32 %896, %864
  %898 = add nsw i32 %866, %736
  %899 = ashr i32 %898, 5
  %900 = shl nsw i32 %899, 2
  %901 = add i32 %900, %492
  %902 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %903 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %902, i32 %901, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %904 = extractvalue %dx.types.ResRet.i32 %903, 0
  %905 = extractvalue %dx.types.ResRet.i32 %903, 1
  %906 = extractvalue %dx.types.ResRet.i32 %903, 2
  %907 = extractvalue %dx.types.ResRet.i32 %903, 3
  %908 = and i32 %898, 31
  %909 = lshr i32 %904, %908
  %910 = icmp ne i32 %908, 0
  %911 = sub i32 0, %898
  %912 = and i32 %911, 31
  %913 = shl i32 %905, %912
  %914 = select i1 %910, i32 %913, i32 0
  %915 = or i32 %914, %909
  %916 = lshr i32 %905, %908
  %917 = shl i32 %906, %912
  %918 = select i1 %910, i32 %917, i32 0
  %919 = or i32 %918, %916
  %920 = lshr i32 %906, %908
  %921 = shl i32 %907, %912
  %922 = select i1 %910, i32 %921, i32 0
  %923 = or i32 %922, %920
  %924 = and i32 %915, %894
  %925 = lshr i32 %858, %630
  %926 = and i32 %925, %864
  %927 = add nsw i32 %866, %850
  %928 = ashr i32 %927, 5
  %929 = shl nsw i32 %928, 2
  %930 = add i32 %929, %492
  %931 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %932 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %931, i32 %930, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %933 = extractvalue %dx.types.ResRet.i32 %932, 0
  %934 = extractvalue %dx.types.ResRet.i32 %932, 1
  %935 = extractvalue %dx.types.ResRet.i32 %932, 2
  %936 = extractvalue %dx.types.ResRet.i32 %932, 3
  %937 = and i32 %927, 31
  %938 = lshr i32 %933, %937
  %939 = icmp ne i32 %937, 0
  %940 = sub i32 0, %927
  %941 = and i32 %940, 31
  %942 = shl i32 %934, %941
  %943 = select i1 %939, i32 %942, i32 0
  %944 = or i32 %943, %938
  %945 = lshr i32 %934, %937
  %946 = shl i32 %935, %941
  %947 = select i1 %939, i32 %946, i32 0
  %948 = or i32 %947, %945
  %949 = lshr i32 %935, %937
  %950 = shl i32 %936, %941
  %951 = select i1 %939, i32 %950, i32 0
  %952 = or i32 %951, %949
  %953 = and i32 %944, %894
  %954 = icmp eq i32 %321, 0
  br i1 %954, label %1006, label %955, !dx.controlflow.hints !83

; <label>:955                                     ; preds = %845
  %956 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %957 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %956, i32 %491, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %958 = extractvalue %dx.types.ResRet.i32 %957, 0
  %959 = extractvalue %dx.types.ResRet.i32 %957, 1
  %960 = extractvalue %dx.types.ResRet.i32 %957, 2
  %961 = extractvalue %dx.types.ResRet.i32 %957, 3
  %962 = add i32 %491, 16
  %963 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %956, i32 %962, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %964 = extractvalue %dx.types.ResRet.i32 %963, 0
  %965 = extractvalue %dx.types.ResRet.i32 %963, 1
  %966 = extractvalue %dx.types.ResRet.i32 %963, 2
  %967 = icmp ugt i32 %865, %960
  %968 = icmp ugt i32 %895, %961
  %969 = select i1 %967, i32 %964, i32 0
  %970 = select i1 %968, i32 %965, i32 0
  %971 = shl i32 %966, 23
  %972 = sub nsw i32 1065353216, %971
  %973 = bitcast i32 %972 to float
  %974 = add i32 %958, %865
  %975 = add i32 %974, %969
  %976 = add i32 %959, %895
  %977 = add i32 %976, %970
  %978 = sitofp i32 %975 to float
  %979 = sitofp i32 %977 to float
  %980 = fmul fast float %978, %973
  %981 = fmul fast float %979, %973
  %982 = icmp ugt i32 %897, %960
  %983 = icmp ugt i32 %924, %961
  %984 = select i1 %982, i32 %964, i32 0
  %985 = select i1 %983, i32 %965, i32 0
  %986 = add i32 %958, %897
  %987 = add i32 %986, %984
  %988 = add i32 %959, %924
  %989 = add i32 %988, %985
  %990 = sitofp i32 %987 to float
  %991 = sitofp i32 %989 to float
  %992 = fmul fast float %990, %973
  %993 = fmul fast float %991, %973
  %994 = icmp ugt i32 %926, %960
  %995 = icmp ugt i32 %953, %961
  %996 = select i1 %994, i32 %964, i32 0
  %997 = select i1 %995, i32 %965, i32 0
  %998 = add i32 %958, %926
  %999 = add i32 %998, %996
  %1000 = add i32 %959, %953
  %1001 = add i32 %1000, %997
  %1002 = sitofp i32 %999 to float
  %1003 = sitofp i32 %1001 to float
  %1004 = fmul fast float %1002, %973
  %1005 = fmul fast float %1003, %973
  br label %1006

; <label>:1006                                    ; preds = %955, %845
  %1007 = phi float [ 0.000000e+00, %845 ], [ %1004, %955 ]
  %1008 = phi float [ 0.000000e+00, %845 ], [ %992, %955 ]
  %1009 = phi float [ 0.000000e+00, %845 ], [ %980, %955 ]
  %1010 = phi float [ 0.000000e+00, %845 ], [ %1005, %955 ]
  %1011 = phi float [ 0.000000e+00, %845 ], [ %993, %955 ]
  %1012 = phi float [ 0.000000e+00, %845 ], [ %981, %955 ]
  %1013 = lshr i32 %302, 8
  %1014 = and i32 %1013, 15
  %1015 = lshr i32 %302, 12
  %1016 = and i32 %1015, 15
  %1017 = add nuw nsw i32 %861, %1014
  %1018 = add nsw i32 %1017, %867
  %1019 = lshr i32 %884, %1017
  %1020 = icmp ne i32 %1017, 0
  %1021 = sub nsw i32 0, %1017
  %1022 = and i32 %1021, 31
  %1023 = shl i32 %888, %1022
  %1024 = select i1 %1020, i32 %1023, i32 0
  %1025 = or i32 %1024, %1019
  %1026 = lshr i32 %888, %1017
  %1027 = shl i32 %892, %1022
  %1028 = select i1 %1020, i32 %1027, i32 0
  %1029 = or i32 %1028, %1026
  %1030 = add nsw i32 %1017, %898
  %1031 = lshr i32 %915, %1017
  %1032 = icmp ne i32 %1017, 0
  %1033 = sub nsw i32 0, %1017
  %1034 = and i32 %1033, 31
  %1035 = shl i32 %919, %1034
  %1036 = select i1 %1032, i32 %1035, i32 0
  %1037 = or i32 %1036, %1031
  %1038 = lshr i32 %919, %1017
  %1039 = shl i32 %923, %1034
  %1040 = select i1 %1032, i32 %1039, i32 0
  %1041 = or i32 %1040, %1038
  %1042 = add nsw i32 %1017, %927
  %1043 = lshr i32 %944, %1017
  %1044 = icmp ne i32 %1017, 0
  %1045 = sub nsw i32 0, %1017
  %1046 = and i32 %1045, 31
  %1047 = shl i32 %948, %1046
  %1048 = select i1 %1044, i32 %1047, i32 0
  %1049 = or i32 %1048, %1043
  %1050 = lshr i32 %948, %1017
  %1051 = shl i32 %952, %1046
  %1052 = select i1 %1044, i32 %1051, i32 0
  %1053 = or i32 %1052, %1050
  %1054 = lshr i32 %302, 16
  %1055 = and i32 %1054, 15
  %1056 = lshr i32 %302, 20
  %1057 = and i32 %1056, 15
  %1058 = add nuw nsw i32 %1016, %1055
  %1059 = add nsw i32 %1058, %1018
  %1060 = lshr i32 %1025, %1058
  %1061 = icmp ne i32 %1058, 0
  %1062 = sub nsw i32 0, %1058
  %1063 = and i32 %1062, 31
  %1064 = shl i32 %1029, %1063
  %1065 = select i1 %1061, i32 %1064, i32 0
  %1066 = or i32 %1065, %1060
  %1067 = add nsw i32 %1058, %1030
  %1068 = lshr i32 %1037, %1058
  %1069 = icmp ne i32 %1058, 0
  %1070 = sub nsw i32 0, %1058
  %1071 = and i32 %1070, 31
  %1072 = shl i32 %1041, %1071
  %1073 = select i1 %1069, i32 %1072, i32 0
  %1074 = or i32 %1073, %1068
  %1075 = add nsw i32 %1058, %1042
  %1076 = lshr i32 %1049, %1058
  %1077 = icmp ne i32 %1058, 0
  %1078 = sub nsw i32 0, %1058
  %1079 = and i32 %1078, 31
  %1080 = shl i32 %1053, %1079
  %1081 = select i1 %1077, i32 %1080, i32 0
  %1082 = or i32 %1081, %1076
  %1083 = lshr i32 %302, 24
  %1084 = and i32 %1083, 15
  %1085 = lshr i32 %302, 28
  %1086 = lshr i32 %1066, %1057
  %1087 = shl i32 1, %1084
  %1088 = add i32 %1087, -1
  %1089 = and i32 %1086, %1088
  %1090 = add nuw nsw i32 %1057, %1084
  %1091 = add nsw i32 %1090, %1059
  %1092 = ashr i32 %1091, 5
  %1093 = shl nsw i32 %1092, 2
  %1094 = add i32 %1093, %492
  %1095 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1096 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1095, i32 %1094, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1097 = extractvalue %dx.types.ResRet.i32 %1096, 0
  %1098 = extractvalue %dx.types.ResRet.i32 %1096, 1
  %1099 = and i32 %1091, 31
  %1100 = lshr i32 %1097, %1099
  %1101 = icmp ne i32 %1099, 0
  %1102 = sub i32 0, %1091
  %1103 = and i32 %1102, 31
  %1104 = shl i32 %1098, %1103
  %1105 = select i1 %1101, i32 %1104, i32 0
  %1106 = or i32 %1105, %1100
  %1107 = shl i32 1, %1085
  %1108 = add i32 %1107, -1
  %1109 = and i32 %1106, %1108
  %1110 = lshr i32 %1074, %1057
  %1111 = and i32 %1110, %1088
  %1112 = add nsw i32 %1090, %1067
  %1113 = ashr i32 %1112, 5
  %1114 = shl nsw i32 %1113, 2
  %1115 = add i32 %1114, %492
  %1116 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1117 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1116, i32 %1115, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1118 = extractvalue %dx.types.ResRet.i32 %1117, 0
  %1119 = extractvalue %dx.types.ResRet.i32 %1117, 1
  %1120 = and i32 %1112, 31
  %1121 = lshr i32 %1118, %1120
  %1122 = icmp ne i32 %1120, 0
  %1123 = sub i32 0, %1112
  %1124 = and i32 %1123, 31
  %1125 = shl i32 %1119, %1124
  %1126 = select i1 %1122, i32 %1125, i32 0
  %1127 = or i32 %1126, %1121
  %1128 = and i32 %1127, %1108
  %1129 = lshr i32 %1082, %1057
  %1130 = and i32 %1129, %1088
  %1131 = add nsw i32 %1090, %1075
  %1132 = ashr i32 %1131, 5
  %1133 = shl nsw i32 %1132, 2
  %1134 = add i32 %1133, %492
  %1135 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1136 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1135, i32 %1134, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1137 = extractvalue %dx.types.ResRet.i32 %1136, 0
  %1138 = extractvalue %dx.types.ResRet.i32 %1136, 1
  %1139 = and i32 %1131, 31
  %1140 = lshr i32 %1137, %1139
  %1141 = icmp ne i32 %1139, 0
  %1142 = sub i32 0, %1131
  %1143 = and i32 %1142, 31
  %1144 = shl i32 %1138, %1143
  %1145 = select i1 %1141, i32 %1144, i32 0
  %1146 = or i32 %1145, %1140
  %1147 = and i32 %1146, %1108
  %1148 = icmp ugt i32 %321, 3
  br i1 %1148, label %1149, label %1201, !dx.controlflow.hints !83

; <label>:1149                                    ; preds = %1006
  %1150 = add i32 %491, 96
  %1151 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1152 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1151, i32 %1150, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1153 = extractvalue %dx.types.ResRet.i32 %1152, 0
  %1154 = extractvalue %dx.types.ResRet.i32 %1152, 1
  %1155 = extractvalue %dx.types.ResRet.i32 %1152, 2
  %1156 = extractvalue %dx.types.ResRet.i32 %1152, 3
  %1157 = add i32 %491, 112
  %1158 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1151, i32 %1157, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1159 = extractvalue %dx.types.ResRet.i32 %1158, 0
  %1160 = extractvalue %dx.types.ResRet.i32 %1158, 1
  %1161 = extractvalue %dx.types.ResRet.i32 %1158, 2
  %1162 = icmp ugt i32 %1089, %1155
  %1163 = icmp ugt i32 %1109, %1156
  %1164 = select i1 %1162, i32 %1159, i32 0
  %1165 = select i1 %1163, i32 %1160, i32 0
  %1166 = shl i32 %1161, 23
  %1167 = sub nsw i32 1065353216, %1166
  %1168 = bitcast i32 %1167 to float
  %1169 = add i32 %1153, %1089
  %1170 = add i32 %1169, %1164
  %1171 = add i32 %1154, %1109
  %1172 = add i32 %1171, %1165
  %1173 = sitofp i32 %1170 to float
  %1174 = sitofp i32 %1172 to float
  %1175 = fmul fast float %1173, %1168
  %1176 = fmul fast float %1174, %1168
  %1177 = icmp ugt i32 %1111, %1155
  %1178 = icmp ugt i32 %1128, %1156
  %1179 = select i1 %1177, i32 %1159, i32 0
  %1180 = select i1 %1178, i32 %1160, i32 0
  %1181 = add i32 %1153, %1111
  %1182 = add i32 %1181, %1179
  %1183 = add i32 %1154, %1128
  %1184 = add i32 %1183, %1180
  %1185 = sitofp i32 %1182 to float
  %1186 = sitofp i32 %1184 to float
  %1187 = fmul fast float %1185, %1168
  %1188 = fmul fast float %1186, %1168
  %1189 = icmp ugt i32 %1130, %1155
  %1190 = icmp ugt i32 %1147, %1156
  %1191 = select i1 %1189, i32 %1159, i32 0
  %1192 = select i1 %1190, i32 %1160, i32 0
  %1193 = add i32 %1153, %1130
  %1194 = add i32 %1193, %1191
  %1195 = add i32 %1154, %1147
  %1196 = add i32 %1195, %1192
  %1197 = sitofp i32 %1194 to float
  %1198 = sitofp i32 %1196 to float
  %1199 = fmul fast float %1197, %1168
  %1200 = fmul fast float %1198, %1168
  br label %1201

; <label>:1201                                    ; preds = %1149, %1006
  %1202 = phi float [ 0.000000e+00, %1006 ], [ %1199, %1149 ]
  %1203 = phi float [ 0.000000e+00, %1006 ], [ %1187, %1149 ]
  %1204 = phi float [ 0.000000e+00, %1006 ], [ %1175, %1149 ]
  %1205 = phi float [ 0.000000e+00, %1006 ], [ %1200, %1149 ]
  %1206 = phi float [ 0.000000e+00, %1006 ], [ %1188, %1149 ]
  %1207 = phi float [ 0.000000e+00, %1006 ], [ %1176, %1149 ]
  %1208 = fmul fast float %406, %221
  %1209 = call float @dx.op.tertiary.f32(i32 46, float %407, float %224, float %1208)  ; FMad(a,b,c)
  %1210 = call float @dx.op.tertiary.f32(i32 46, float %408, float %227, float %1209)  ; FMad(a,b,c)
  %1211 = fmul fast float %406, %222
  %1212 = call float @dx.op.tertiary.f32(i32 46, float %407, float %225, float %1211)  ; FMad(a,b,c)
  %1213 = call float @dx.op.tertiary.f32(i32 46, float %408, float %228, float %1212)  ; FMad(a,b,c)
  %1214 = fmul fast float %406, %223
  %1215 = call float @dx.op.tertiary.f32(i32 46, float %407, float %226, float %1214)  ; FMad(a,b,c)
  %1216 = call float @dx.op.tertiary.f32(i32 46, float %408, float %229, float %1215)  ; FMad(a,b,c)
  %1217 = fmul fast float %447, %221
  %1218 = call float @dx.op.tertiary.f32(i32 46, float %448, float %224, float %1217)  ; FMad(a,b,c)
  %1219 = call float @dx.op.tertiary.f32(i32 46, float %449, float %227, float %1218)  ; FMad(a,b,c)
  %1220 = fmul fast float %447, %222
  %1221 = call float @dx.op.tertiary.f32(i32 46, float %448, float %225, float %1220)  ; FMad(a,b,c)
  %1222 = call float @dx.op.tertiary.f32(i32 46, float %449, float %228, float %1221)  ; FMad(a,b,c)
  %1223 = fmul fast float %447, %223
  %1224 = call float @dx.op.tertiary.f32(i32 46, float %448, float %226, float %1223)  ; FMad(a,b,c)
  %1225 = call float @dx.op.tertiary.f32(i32 46, float %449, float %229, float %1224)  ; FMad(a,b,c)
  %1226 = fmul fast float %488, %221
  %1227 = call float @dx.op.tertiary.f32(i32 46, float %489, float %224, float %1226)  ; FMad(a,b,c)
  %1228 = call float @dx.op.tertiary.f32(i32 46, float %490, float %227, float %1227)  ; FMad(a,b,c)
  %1229 = fmul fast float %488, %222
  %1230 = call float @dx.op.tertiary.f32(i32 46, float %489, float %225, float %1229)  ; FMad(a,b,c)
  %1231 = call float @dx.op.tertiary.f32(i32 46, float %490, float %228, float %1230)  ; FMad(a,b,c)
  %1232 = fmul fast float %488, %223
  %1233 = call float @dx.op.tertiary.f32(i32 46, float %489, float %226, float %1232)  ; FMad(a,b,c)
  %1234 = call float @dx.op.tertiary.f32(i32 46, float %490, float %229, float %1233)  ; FMad(a,b,c)
  %1235 = fsub fast float %59, %126
  %1236 = fsub fast float %60, %127
  %1237 = fsub fast float %61, %128
  %1238 = fmul fast float %1235, 2.097152e+06
  %1239 = fmul fast float %1236, 2.097152e+06
  %1240 = fmul fast float %1237, 2.097152e+06
  %1241 = fsub fast float %1238, %63
  %1242 = fsub fast float %1239, %64
  %1243 = fsub fast float %1240, %65
  %1244 = fmul fast float %237, %1241
  %1245 = call float @dx.op.tertiary.f32(i32 46, float %1242, float %238, float %1244)  ; FMad(a,b,c)
  %1246 = call float @dx.op.tertiary.f32(i32 46, float %1243, float %239, float %1245)  ; FMad(a,b,c)
  %1247 = fadd fast float %1246, %253
  %1248 = fmul fast float %241, %1241
  %1249 = call float @dx.op.tertiary.f32(i32 46, float %1242, float %242, float %1248)  ; FMad(a,b,c)
  %1250 = call float @dx.op.tertiary.f32(i32 46, float %1243, float %243, float %1249)  ; FMad(a,b,c)
  %1251 = fadd fast float %1250, %256
  %1252 = fmul fast float %245, %1241
  %1253 = call float @dx.op.tertiary.f32(i32 46, float %1242, float %246, float %1252)  ; FMad(a,b,c)
  %1254 = call float @dx.op.tertiary.f32(i32 46, float %1243, float %247, float %1253)  ; FMad(a,b,c)
  %1255 = fadd fast float %1254, %259
  %1256 = fmul fast float %75, %53
  %1257 = call float @dx.op.tertiary.f32(i32 46, float %54, float %80, float %1256)  ; FMad(a,b,c)
  %1258 = call float @dx.op.tertiary.f32(i32 46, float %103, float %85, float %1257)  ; FMad(a,b,c)
  %1259 = call float @dx.op.tertiary.f32(i32 46, float %55, float %90, float %1258)  ; FMad(a,b,c)
  %1260 = fmul fast float %76, %53
  %1261 = call float @dx.op.tertiary.f32(i32 46, float %54, float %81, float %1260)  ; FMad(a,b,c)
  %1262 = call float @dx.op.tertiary.f32(i32 46, float %103, float %86, float %1261)  ; FMad(a,b,c)
  %1263 = call float @dx.op.tertiary.f32(i32 46, float %55, float %91, float %1262)  ; FMad(a,b,c)
  %1264 = fmul fast float %77, %53
  %1265 = call float @dx.op.tertiary.f32(i32 46, float %54, float %82, float %1264)  ; FMad(a,b,c)
  %1266 = call float @dx.op.tertiary.f32(i32 46, float %103, float %87, float %1265)  ; FMad(a,b,c)
  %1267 = call float @dx.op.tertiary.f32(i32 46, float %55, float %92, float %1266)  ; FMad(a,b,c)
  %1268 = fmul fast float %78, %53
  %1269 = call float @dx.op.tertiary.f32(i32 46, float %54, float %83, float %1268)  ; FMad(a,b,c)
  %1270 = call float @dx.op.tertiary.f32(i32 46, float %103, float %88, float %1269)  ; FMad(a,b,c)
  %1271 = call float @dx.op.tertiary.f32(i32 46, float %55, float %93, float %1270)  ; FMad(a,b,c)
  %1272 = fmul fast float %1259, %237
  %1273 = call float @dx.op.tertiary.f32(i32 46, float %1263, float %238, float %1272)  ; FMad(a,b,c)
  %1274 = call float @dx.op.tertiary.f32(i32 46, float %1267, float %239, float %1273)  ; FMad(a,b,c)
  %1275 = call float @dx.op.tertiary.f32(i32 46, float %1271, float %1247, float %1274)  ; FMad(a,b,c)
  %1276 = fmul fast float %1259, %241
  %1277 = call float @dx.op.tertiary.f32(i32 46, float %1263, float %242, float %1276)  ; FMad(a,b,c)
  %1278 = call float @dx.op.tertiary.f32(i32 46, float %1267, float %243, float %1277)  ; FMad(a,b,c)
  %1279 = call float @dx.op.tertiary.f32(i32 46, float %1271, float %1251, float %1278)  ; FMad(a,b,c)
  %1280 = fmul fast float %1259, %245
  %1281 = call float @dx.op.tertiary.f32(i32 46, float %1263, float %246, float %1280)  ; FMad(a,b,c)
  %1282 = call float @dx.op.tertiary.f32(i32 46, float %1267, float %247, float %1281)  ; FMad(a,b,c)
  %1283 = call float @dx.op.tertiary.f32(i32 46, float %1271, float %1255, float %1282)  ; FMad(a,b,c)
  %1284 = fmul fast float %237, %75
  %1285 = call float @dx.op.tertiary.f32(i32 46, float %76, float %238, float %1284)  ; FMad(a,b,c)
  %1286 = call float @dx.op.tertiary.f32(i32 46, float %77, float %239, float %1285)  ; FMad(a,b,c)
  %1287 = fmul fast float %241, %75
  %1288 = call float @dx.op.tertiary.f32(i32 46, float %76, float %242, float %1287)  ; FMad(a,b,c)
  %1289 = call float @dx.op.tertiary.f32(i32 46, float %77, float %243, float %1288)  ; FMad(a,b,c)
  %1290 = call float @dx.op.tertiary.f32(i32 46, float %78, float %1251, float %1289)  ; FMad(a,b,c)
  %1291 = fmul fast float %245, %75
  %1292 = call float @dx.op.tertiary.f32(i32 46, float %76, float %246, float %1291)  ; FMad(a,b,c)
  %1293 = call float @dx.op.tertiary.f32(i32 46, float %77, float %247, float %1292)  ; FMad(a,b,c)
  %1294 = call float @dx.op.tertiary.f32(i32 46, float %78, float %1255, float %1293)  ; FMad(a,b,c)
  %1295 = fmul fast float %237, %80
  %1296 = call float @dx.op.tertiary.f32(i32 46, float %81, float %238, float %1295)  ; FMad(a,b,c)
  %1297 = call float @dx.op.tertiary.f32(i32 46, float %82, float %239, float %1296)  ; FMad(a,b,c)
  %1298 = call float @dx.op.tertiary.f32(i32 46, float %83, float %1247, float %1297)  ; FMad(a,b,c)
  %1299 = fmul fast float %241, %80
  %1300 = call float @dx.op.tertiary.f32(i32 46, float %81, float %242, float %1299)  ; FMad(a,b,c)
  %1301 = call float @dx.op.tertiary.f32(i32 46, float %82, float %243, float %1300)  ; FMad(a,b,c)
  %1302 = fmul fast float %245, %80
  %1303 = call float @dx.op.tertiary.f32(i32 46, float %81, float %246, float %1302)  ; FMad(a,b,c)
  %1304 = call float @dx.op.tertiary.f32(i32 46, float %82, float %247, float %1303)  ; FMad(a,b,c)
  %1305 = call float @dx.op.tertiary.f32(i32 46, float %83, float %1255, float %1304)  ; FMad(a,b,c)
  %1306 = fadd fast float %1298, %1275
  %1307 = fadd fast float %1305, %1283
  %1308 = fdiv fast float %1306, %1271
  %1309 = fdiv fast float %1307, %1271
  %1310 = fadd fast float %1290, %1279
  %1311 = fadd fast float %1294, %1283
  %1312 = fdiv fast float %1310, %1271
  %1313 = fdiv fast float %1275, %1271
  %1314 = fdiv fast float %1279, %1271
  %1315 = fdiv fast float %1283, %1271
  br label %1316

; <label>:1316                                    ; preds = %1316, %1201
  %1317 = phi float [ %488, %1201 ], [ %1429, %1316 ]
  %1318 = phi float [ %489, %1201 ], [ %1430, %1316 ]
  %1319 = phi float [ %490, %1201 ], [ %1431, %1316 ]
  %1320 = phi float [ %447, %1201 ], [ %1423, %1316 ]
  %1321 = phi float [ %448, %1201 ], [ %1424, %1316 ]
  %1322 = phi float [ %449, %1201 ], [ %1425, %1316 ]
  %1323 = phi float [ %406, %1201 ], [ %1417, %1316 ]
  %1324 = phi float [ %407, %1201 ], [ %1418, %1316 ]
  %1325 = phi float [ %408, %1201 ], [ %1419, %1316 ]
  %1326 = phi i32 [ 0, %1201 ], [ %1432, %1316 ]
  %1327 = fsub fast float %1320, %1323
  %1328 = fsub fast float %1321, %1324
  %1329 = fsub fast float %1322, %1325
  %1330 = fsub fast float %1317, %1323
  %1331 = fsub fast float %1318, %1324
  %1332 = fsub fast float %1319, %1325
  %1333 = fsub fast float %1313, %1323
  %1334 = fsub fast float %1314, %1324
  %1335 = fsub fast float %1315, %1325
  %1336 = fmul fast float %1329, %1331
  %1337 = fmul fast float %1332, %1328
  %1338 = fsub fast float %1336, %1337
  %1339 = fmul fast float %1332, %1327
  %1340 = fmul fast float %1329, %1330
  %1341 = fsub fast float %1339, %1340
  %1342 = fmul fast float %1328, %1330
  %1343 = fmul fast float %1331, %1327
  %1344 = fsub fast float %1342, %1343
  %1345 = fmul fast float %1341, %1332
  %1346 = fmul fast float %1344, %1331
  %1347 = fsub fast float %1345, %1346
  %1348 = fmul fast float %1344, %1330
  %1349 = fmul fast float %1338, %1332
  %1350 = fsub fast float %1348, %1349
  %1351 = fmul fast float %1338, %1331
  %1352 = fmul fast float %1341, %1330
  %1353 = fsub fast float %1351, %1352
  %1354 = call float @dx.op.dot3.f32(i32 55, float %1327, float %1328, float %1329, float %1347, float %1350, float %1353)  ; Dot3(ax,ay,az,bx,by,bz)
  %1355 = fdiv fast float 1.000000e+00, %1354
  %1356 = call float @dx.op.dot3.f32(i32 55, float %1333, float %1334, float %1335, float %1347, float %1350, float %1353)  ; Dot3(ax,ay,az,bx,by,bz)
  %1357 = fmul fast float %1356, %1355
  %1358 = fmul fast float %1329, %1334
  %1359 = fmul fast float %1335, %1328
  %1360 = fsub fast float %1358, %1359
  %1361 = fmul fast float %1335, %1327
  %1362 = fmul fast float %1329, %1333
  %1363 = fsub fast float %1361, %1362
  %1364 = fmul fast float %1328, %1333
  %1365 = fmul fast float %1334, %1327
  %1366 = fsub fast float %1364, %1365
  %1367 = call float @dx.op.dot3.f32(i32 55, float %1338, float %1341, float %1344, float %1360, float %1363, float %1366)  ; Dot3(ax,ay,az,bx,by,bz)
  %1368 = fmul fast float %1367, %1355
  %1369 = fsub fast float 1.000000e+00, %1357
  %1370 = fsub fast float %1369, %1368
  %1371 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1370)  ; FMax(a,b)
  %1372 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1357)  ; FMax(a,b)
  %1373 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1368)  ; FMax(a,b)
  %1374 = call float @dx.op.dot3.f32(i32 55, float %1371, float %1372, float %1373, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot3(ax,ay,az,bx,by,bz)
  %1375 = fdiv fast float %1371, %1374
  %1376 = fdiv fast float %1372, %1374
  %1377 = fdiv fast float %1373, %1374
  %1378 = fmul fast float %1375, %1323
  %1379 = fmul fast float %1375, %1324
  %1380 = fmul fast float %1375, %1325
  %1381 = fmul fast float %1376, %1320
  %1382 = fmul fast float %1376, %1321
  %1383 = fmul fast float %1376, %1322
  %1384 = fmul fast float %1377, %1317
  %1385 = fmul fast float %1377, %1318
  %1386 = fmul fast float %1377, %1319
  %1387 = fmul fast float %1375, %557
  %1388 = fmul fast float %1375, %558
  %1389 = fmul fast float %1375, %559
  %1390 = fmul fast float %1376, %681
  %1391 = fmul fast float %1376, %682
  %1392 = fmul fast float %1376, %683
  %1393 = fadd fast float %1390, %1387
  %1394 = fadd fast float %1391, %1388
  %1395 = fadd fast float %1392, %1389
  %1396 = fmul fast float %1377, %795
  %1397 = fmul fast float %1377, %796
  %1398 = fmul fast float %1377, %797
  %1399 = fadd fast float %1393, %1396
  %1400 = fadd fast float %1394, %1397
  %1401 = fadd fast float %1395, %1398
  %1402 = fsub fast float %1313, %1378
  %1403 = fsub fast float %1402, %1381
  %1404 = fsub fast float %1403, %1384
  %1405 = fsub fast float %1314, %1379
  %1406 = fsub fast float %1405, %1382
  %1407 = fsub fast float %1406, %1385
  %1408 = fsub fast float %1315, %1380
  %1409 = fsub fast float %1408, %1383
  %1410 = fsub fast float %1409, %1386
  %1411 = call float @dx.op.dot3.f32(i32 55, float %1404, float %1407, float %1410, float %1399, float %1400, float %1401)  ; Dot3(ax,ay,az,bx,by,bz)
  %1412 = call float @dx.op.dot3.f32(i32 55, float %1399, float %1400, float %1401, float %1399, float %1400, float %1401)  ; Dot3(ax,ay,az,bx,by,bz)
  %1413 = fdiv fast float %1411, %1412
  %1414 = fmul fast float %1413, %557
  %1415 = fmul fast float %1413, %558
  %1416 = fmul fast float %1413, %559
  %1417 = fadd fast float %1414, %1323
  %1418 = fadd fast float %1415, %1324
  %1419 = fadd fast float %1416, %1325
  %1420 = fmul fast float %1413, %681
  %1421 = fmul fast float %1413, %682
  %1422 = fmul fast float %1413, %683
  %1423 = fadd fast float %1420, %1320
  %1424 = fadd fast float %1421, %1321
  %1425 = fadd fast float %1422, %1322
  %1426 = fmul fast float %1413, %795
  %1427 = fmul fast float %1413, %796
  %1428 = fmul fast float %1413, %797
  %1429 = fadd fast float %1426, %1317
  %1430 = fadd fast float %1427, %1318
  %1431 = fadd fast float %1428, %1319
  %1432 = add nuw nsw i32 %1326, 1
  %1433 = icmp eq i32 %1432, 2
  br i1 %1433, label %1434, label %1316

; <label>:1434                                    ; preds = %1316
  %1435 = fadd fast float %1210, %267
  %1436 = fadd fast float %1213, %269
  %1437 = fadd fast float %1216, %271
  %1438 = fadd fast float %1219, %267
  %1439 = fadd fast float %1222, %269
  %1440 = fadd fast float %1225, %271
  %1441 = fadd fast float %1228, %267
  %1442 = fadd fast float %1231, %269
  %1443 = fadd fast float %1234, %271
  %1444 = call float @dx.op.tertiary.f32(i32 46, float %78, float %1247, float %1286)  ; FMad(a,b,c)
  %1445 = call float @dx.op.tertiary.f32(i32 46, float %83, float %1251, float %1301)  ; FMad(a,b,c)
  %1446 = fadd fast float %1445, %1279
  %1447 = fdiv fast float %1446, %1271
  %1448 = fadd fast float %1444, %1275
  %1449 = fdiv fast float %1448, %1271
  %1450 = fdiv fast float %1311, %1271
  %1451 = fsub fast float %1423, %1417
  %1452 = fsub fast float %1424, %1418
  %1453 = fsub fast float %1425, %1419
  %1454 = fsub fast float %1429, %1417
  %1455 = fsub fast float %1430, %1418
  %1456 = fsub fast float %1431, %1419
  %1457 = fsub fast float %1313, %1417
  %1458 = fsub fast float %1314, %1418
  %1459 = fsub fast float %1315, %1419
  %1460 = fmul fast float %1455, %1453
  %1461 = fmul fast float %1456, %1452
  %1462 = fsub fast float %1460, %1461
  %1463 = fmul fast float %1456, %1451
  %1464 = fmul fast float %1454, %1453
  %1465 = fsub fast float %1463, %1464
  %1466 = fmul fast float %1454, %1452
  %1467 = fmul fast float %1455, %1451
  %1468 = fsub fast float %1466, %1467
  %1469 = fmul fast float %1465, %1456
  %1470 = fmul fast float %1468, %1455
  %1471 = fsub fast float %1469, %1470
  %1472 = fmul fast float %1468, %1454
  %1473 = fmul fast float %1462, %1456
  %1474 = fsub fast float %1472, %1473
  %1475 = fmul fast float %1462, %1455
  %1476 = fmul fast float %1465, %1454
  %1477 = fsub fast float %1475, %1476
  %1478 = call float @dx.op.dot3.f32(i32 55, float %1451, float %1452, float %1453, float %1471, float %1474, float %1477)  ; Dot3(ax,ay,az,bx,by,bz)
  %1479 = fdiv fast float 1.000000e+00, %1478
  %1480 = call float @dx.op.dot3.f32(i32 55, float %1457, float %1458, float %1459, float %1471, float %1474, float %1477)  ; Dot3(ax,ay,az,bx,by,bz)
  %1481 = fmul fast float %1480, %1479
  %1482 = fmul fast float %1458, %1453
  %1483 = fmul fast float %1459, %1452
  %1484 = fsub fast float %1482, %1483
  %1485 = fmul fast float %1459, %1451
  %1486 = fmul fast float %1457, %1453
  %1487 = fsub fast float %1485, %1486
  %1488 = fmul fast float %1457, %1452
  %1489 = fmul fast float %1458, %1451
  %1490 = fsub fast float %1488, %1489
  %1491 = call float @dx.op.dot3.f32(i32 55, float %1462, float %1465, float %1468, float %1484, float %1487, float %1490)  ; Dot3(ax,ay,az,bx,by,bz)
  %1492 = fmul fast float %1491, %1479
  %1493 = fsub fast float 1.000000e+00, %1481
  %1494 = fsub fast float %1493, %1492
  %1495 = fsub fast float %1449, %1417
  %1496 = fsub fast float %1312, %1418
  %1497 = fsub fast float %1450, %1419
  %1498 = call float @dx.op.dot3.f32(i32 55, float %1495, float %1496, float %1497, float %1471, float %1474, float %1477)  ; Dot3(ax,ay,az,bx,by,bz)
  %1499 = fmul fast float %1496, %1453
  %1500 = fmul fast float %1497, %1452
  %1501 = fsub fast float %1499, %1500
  %1502 = fmul fast float %1497, %1451
  %1503 = fmul fast float %1495, %1453
  %1504 = fsub fast float %1502, %1503
  %1505 = fmul fast float %1495, %1452
  %1506 = fmul fast float %1496, %1451
  %1507 = fsub fast float %1505, %1506
  %1508 = call float @dx.op.dot3.f32(i32 55, float %1462, float %1465, float %1468, float %1501, float %1504, float %1507)  ; Dot3(ax,ay,az,bx,by,bz)
  %1509 = fsub fast float %1498, %1480
  %1510 = fmul fast float %1479, %1509
  %1511 = fsub fast float %1508, %1491
  %1512 = fmul fast float %1479, %1511
  %1513 = fsub fast float %1308, %1417
  %1514 = fsub fast float %1447, %1418
  %1515 = fsub fast float %1309, %1419
  %1516 = call float @dx.op.dot3.f32(i32 55, float %1513, float %1514, float %1515, float %1471, float %1474, float %1477)  ; Dot3(ax,ay,az,bx,by,bz)
  %1517 = fmul fast float %1514, %1453
  %1518 = fmul fast float %1515, %1452
  %1519 = fsub fast float %1517, %1518
  %1520 = fmul fast float %1515, %1451
  %1521 = fmul fast float %1513, %1453
  %1522 = fsub fast float %1520, %1521
  %1523 = fmul fast float %1513, %1452
  %1524 = fmul fast float %1514, %1451
  %1525 = fsub fast float %1523, %1524
  %1526 = call float @dx.op.dot3.f32(i32 55, float %1462, float %1465, float %1468, float %1519, float %1522, float %1525)  ; Dot3(ax,ay,az,bx,by,bz)
  %1527 = fsub fast float %1516, %1480
  %1528 = fmul fast float %1479, %1527
  %1529 = fsub fast float %1526, %1491
  %1530 = fmul fast float %1479, %1529
  %1531 = fmul fast float %1494, %557
  %1532 = fmul fast float %1494, %558
  %1533 = fmul fast float %1494, %559
  %1534 = fmul fast float %1481, %681
  %1535 = fmul fast float %1481, %682
  %1536 = fmul fast float %1481, %683
  %1537 = fmul fast float %1492, %795
  %1538 = fmul fast float %1492, %796
  %1539 = fmul fast float %1492, %797
  %1540 = fadd fast float %1537, %1534
  %1541 = fadd fast float %1540, %1531
  %1542 = fadd fast float %1538, %1535
  %1543 = fadd fast float %1542, %1532
  %1544 = fadd fast float %1539, %1536
  %1545 = fadd fast float %1544, %1533
  %1546 = call float @dx.op.dot3.f32(i32 55, float %1541, float %1543, float %1545, float %1541, float %1543, float %1545)  ; Dot3(ax,ay,az,bx,by,bz)
  %1547 = call float @dx.op.unary.f32(i32 25, float %1546)  ; Rsqrt(value)
  %1548 = fmul fast float %1547, %1541
  %1549 = fmul fast float %1547, %1543
  %1550 = fmul fast float %1547, %1545
  br i1 %954, label %1551, label %1564

; <label>:1551                                    ; preds = %1434
  %1552 = fmul fast float %1548, %235
  %1553 = fmul fast float %1549, %235
  %1554 = fmul fast float %1550, %235
  %1555 = fmul fast float %1552, %221
  %1556 = call float @dx.op.tertiary.f32(i32 46, float %1553, float %224, float %1555)  ; FMad(a,b,c)
  %1557 = call float @dx.op.tertiary.f32(i32 46, float %1554, float %227, float %1556)  ; FMad(a,b,c)
  %1558 = fmul fast float %1552, %222
  %1559 = call float @dx.op.tertiary.f32(i32 46, float %1553, float %225, float %1558)  ; FMad(a,b,c)
  %1560 = call float @dx.op.tertiary.f32(i32 46, float %1554, float %228, float %1559)  ; FMad(a,b,c)
  %1561 = fmul fast float %1552, %223
  %1562 = call float @dx.op.tertiary.f32(i32 46, float %1553, float %226, float %1561)  ; FMad(a,b,c)
  %1563 = call float @dx.op.tertiary.f32(i32 46, float %1554, float %229, float %1562)  ; FMad(a,b,c)
  br label %1741

; <label>:1564                                    ; preds = %1434
  br i1 %319, label %1662, label %1565, !dx.controlflow.hints !84

; <label>:1565                                    ; preds = %1564
  %1566 = fsub fast float %444, %403
  %1567 = fmul fast float %399, %1566
  %1568 = fsub fast float %445, %404
  %1569 = fmul fast float %399, %1568
  %1570 = fsub fast float %446, %405
  %1571 = fmul fast float %399, %1570
  %1572 = fsub fast float %485, %403
  %1573 = fmul fast float %399, %1572
  %1574 = fsub fast float %486, %404
  %1575 = fmul fast float %399, %1574
  %1576 = fsub fast float %487, %405
  %1577 = fmul fast float %399, %1576
  %1578 = fsub fast float %1008, %1009
  %1579 = fsub fast float %1011, %1012
  %1580 = fsub fast float %1007, %1009
  %1581 = fsub fast float %1010, %1012
  %1582 = call float @dx.op.unary.f32(i32 6, float %1578)  ; FAbs(value)
  %1583 = call float @dx.op.unary.f32(i32 6, float %1580)  ; FAbs(value)
  %1584 = fadd fast float %1583, %1582
  %1585 = fcmp fast ogt float %1584, 0x3EB0C6F7A0000000
  br i1 %1585, label %1605, label %1586, !dx.controlflow.hints !85

; <label>:1586                                    ; preds = %1565
  %1587 = fcmp fast oge float %1550, 0.000000e+00
  %1588 = select i1 %1587, float 1.000000e+00, float -1.000000e+00
  %1589 = fadd fast float %1588, %1550
  %1590 = fdiv fast float 1.000000e+00, %1589
  %1591 = fsub fast float -0.000000e+00, %1590
  %1592 = fmul fast float %1548, %1549
  %1593 = fmul fast float %1592, %1591
  %1594 = fmul fast float %1548, %1548
  %1595 = fmul fast float %1594, %1588
  %1596 = fmul fast float %1595, %1591
  %1597 = fadd fast float %1596, 1.000000e+00
  %1598 = fmul fast float %1593, %1588
  %1599 = fmul fast float %1548, %1588
  %1600 = fsub fast float -0.000000e+00, %1599
  %1601 = fmul fast float %1549, %1549
  %1602 = fmul fast float %1601, %1591
  %1603 = fadd fast float %1602, %1588
  %1604 = fsub fast float -0.000000e+00, %1549
  br label %1695

; <label>:1605                                    ; preds = %1565
  %1606 = fmul fast float %1549, %1577
  %1607 = fmul fast float %1550, %1575
  %1608 = fsub fast float %1606, %1607
  %1609 = fmul fast float %1550, %1573
  %1610 = fmul fast float %1548, %1577
  %1611 = fsub fast float %1609, %1610
  %1612 = fmul fast float %1548, %1575
  %1613 = fmul fast float %1549, %1573
  %1614 = fsub fast float %1612, %1613
  %1615 = fmul fast float %1550, %1569
  %1616 = fmul fast float %1549, %1571
  %1617 = fsub fast float %1615, %1616
  %1618 = fmul fast float %1548, %1571
  %1619 = fmul fast float %1550, %1567
  %1620 = fsub fast float %1618, %1619
  %1621 = fmul fast float %1549, %1567
  %1622 = fmul fast float %1548, %1569
  %1623 = fsub fast float %1621, %1622
  %1624 = fmul fast float %1608, %1578
  %1625 = fmul fast float %1611, %1578
  %1626 = fmul fast float %1614, %1578
  %1627 = fmul fast float %1617, %1580
  %1628 = fmul fast float %1620, %1580
  %1629 = fmul fast float %1623, %1580
  %1630 = fadd fast float %1624, %1627
  %1631 = fadd fast float %1625, %1628
  %1632 = fadd fast float %1626, %1629
  %1633 = fmul fast float %1608, %1579
  %1634 = fmul fast float %1611, %1579
  %1635 = fmul fast float %1614, %1579
  %1636 = fmul fast float %1617, %1581
  %1637 = fmul fast float %1620, %1581
  %1638 = fmul fast float %1623, %1581
  %1639 = fadd fast float %1633, %1636
  %1640 = fadd fast float %1634, %1637
  %1641 = fadd fast float %1635, %1638
  %1642 = call float @dx.op.dot3.f32(i32 55, float %1630, float %1631, float %1632, float %1630, float %1631, float %1632)  ; Dot3(ax,ay,az,bx,by,bz)
  %1643 = call float @dx.op.unary.f32(i32 25, float %1642)  ; Rsqrt(value)
  %1644 = fmul fast float %1643, %1630
  %1645 = fmul fast float %1643, %1631
  %1646 = fmul fast float %1643, %1632
  %1647 = fmul fast float %1646, %1549
  %1648 = fmul fast float %1645, %1550
  %1649 = fsub fast float %1647, %1648
  %1650 = fmul fast float %1644, %1550
  %1651 = fmul fast float %1646, %1548
  %1652 = fsub fast float %1650, %1651
  %1653 = fmul fast float %1645, %1548
  %1654 = fmul fast float %1644, %1549
  %1655 = fsub fast float %1653, %1654
  %1656 = call float @dx.op.dot3.f32(i32 55, float %1639, float %1640, float %1641, float %1649, float %1652, float %1655)  ; Dot3(ax,ay,az,bx,by,bz)
  %1657 = fcmp fast olt float %1656, 0.000000e+00
  %1658 = select i1 %1657, float -1.000000e+00, float 1.000000e+00
  %1659 = fmul fast float %1649, %1658
  %1660 = fmul fast float %1652, %1658
  %1661 = fmul fast float %1655, %1658
  br label %1695

; <label>:1662                                    ; preds = %1564
  %1663 = fmul fast float %1494, %615
  %1664 = fmul fast float %1494, %616
  %1665 = fmul fast float %1494, %617
  %1666 = fmul fast float %1494, %618
  %1667 = fmul fast float %1481, %732
  %1668 = fmul fast float %1481, %733
  %1669 = fmul fast float %1481, %734
  %1670 = fmul fast float %1481, %735
  %1671 = fmul fast float %1492, %846
  %1672 = fmul fast float %1492, %847
  %1673 = fmul fast float %1492, %848
  %1674 = fmul fast float %1492, %849
  %1675 = fadd fast float %1671, %1667
  %1676 = fadd fast float %1675, %1663
  %1677 = fadd fast float %1672, %1668
  %1678 = fadd fast float %1677, %1664
  %1679 = fadd fast float %1673, %1669
  %1680 = fadd fast float %1679, %1665
  %1681 = fadd fast float %1674, %1670
  %1682 = fadd fast float %1681, %1666
  %1683 = fmul fast float %1543, %1680
  %1684 = fmul fast float %1545, %1678
  %1685 = fsub fast float %1683, %1684
  %1686 = fmul fast float %1545, %1676
  %1687 = fmul fast float %1541, %1680
  %1688 = fsub fast float %1686, %1687
  %1689 = fmul fast float %1541, %1678
  %1690 = fmul fast float %1543, %1676
  %1691 = fsub fast float %1689, %1690
  %1692 = fmul fast float %1685, %1682
  %1693 = fmul fast float %1688, %1682
  %1694 = fmul fast float %1691, %1682
  br label %1695

; <label>:1695                                    ; preds = %1662, %1605, %1586
  %1696 = phi float [ %1676, %1662 ], [ %1644, %1605 ], [ %1597, %1586 ]
  %1697 = phi float [ %1678, %1662 ], [ %1645, %1605 ], [ %1598, %1586 ]
  %1698 = phi float [ %1680, %1662 ], [ %1646, %1605 ], [ %1600, %1586 ]
  %1699 = phi float [ %1692, %1662 ], [ %1659, %1605 ], [ %1593, %1586 ]
  %1700 = phi float [ %1693, %1662 ], [ %1660, %1605 ], [ %1603, %1586 ]
  %1701 = phi float [ %1694, %1662 ], [ %1661, %1605 ], [ %1604, %1586 ]
  %1702 = phi float [ %1541, %1662 ], [ %1548, %1605 ], [ %1548, %1586 ]
  %1703 = phi float [ %1543, %1662 ], [ %1549, %1605 ], [ %1549, %1586 ]
  %1704 = phi float [ %1545, %1662 ], [ %1550, %1605 ], [ %1550, %1586 ]
  %1705 = fmul fast float %221, %233
  %1706 = fmul fast float %222, %233
  %1707 = fmul fast float %223, %233
  %1708 = fmul fast float %224, %234
  %1709 = fmul fast float %225, %234
  %1710 = fmul fast float %226, %234
  %1711 = fmul fast float %235, %227
  %1712 = fmul fast float %235, %228
  %1713 = fmul fast float %235, %229
  %1714 = fmul fast float %1696, %1705
  %1715 = call float @dx.op.tertiary.f32(i32 46, float %1697, float %1708, float %1714)  ; FMad(a,b,c)
  %1716 = call float @dx.op.tertiary.f32(i32 46, float %1698, float %1711, float %1715)  ; FMad(a,b,c)
  %1717 = fmul fast float %1696, %1706
  %1718 = call float @dx.op.tertiary.f32(i32 46, float %1697, float %1709, float %1717)  ; FMad(a,b,c)
  %1719 = call float @dx.op.tertiary.f32(i32 46, float %1698, float %1712, float %1718)  ; FMad(a,b,c)
  %1720 = fmul fast float %1696, %1707
  %1721 = call float @dx.op.tertiary.f32(i32 46, float %1697, float %1710, float %1720)  ; FMad(a,b,c)
  %1722 = call float @dx.op.tertiary.f32(i32 46, float %1698, float %1713, float %1721)  ; FMad(a,b,c)
  %1723 = fmul fast float %1699, %1705
  %1724 = call float @dx.op.tertiary.f32(i32 46, float %1700, float %1708, float %1723)  ; FMad(a,b,c)
  %1725 = call float @dx.op.tertiary.f32(i32 46, float %1701, float %1711, float %1724)  ; FMad(a,b,c)
  %1726 = fmul fast float %1699, %1706
  %1727 = call float @dx.op.tertiary.f32(i32 46, float %1700, float %1709, float %1726)  ; FMad(a,b,c)
  %1728 = call float @dx.op.tertiary.f32(i32 46, float %1701, float %1712, float %1727)  ; FMad(a,b,c)
  %1729 = fmul fast float %1699, %1707
  %1730 = call float @dx.op.tertiary.f32(i32 46, float %1700, float %1710, float %1729)  ; FMad(a,b,c)
  %1731 = call float @dx.op.tertiary.f32(i32 46, float %1701, float %1713, float %1730)  ; FMad(a,b,c)
  %1732 = fmul fast float %1702, %1705
  %1733 = call float @dx.op.tertiary.f32(i32 46, float %1703, float %1708, float %1732)  ; FMad(a,b,c)
  %1734 = call float @dx.op.tertiary.f32(i32 46, float %1704, float %1711, float %1733)  ; FMad(a,b,c)
  %1735 = fmul fast float %1702, %1706
  %1736 = call float @dx.op.tertiary.f32(i32 46, float %1703, float %1709, float %1735)  ; FMad(a,b,c)
  %1737 = call float @dx.op.tertiary.f32(i32 46, float %1704, float %1712, float %1736)  ; FMad(a,b,c)
  %1738 = fmul fast float %1702, %1707
  %1739 = call float @dx.op.tertiary.f32(i32 46, float %1703, float %1710, float %1738)  ; FMad(a,b,c)
  %1740 = call float @dx.op.tertiary.f32(i32 46, float %1704, float %1713, float %1739)  ; FMad(a,b,c)
  br label %1741

; <label>:1741                                    ; preds = %1695, %1551
  %1742 = phi float [ %1716, %1695 ], [ 0.000000e+00, %1551 ]
  %1743 = phi float [ %1719, %1695 ], [ 0.000000e+00, %1551 ]
  %1744 = phi float [ %1722, %1695 ], [ 0.000000e+00, %1551 ]
  %1745 = phi float [ %1725, %1695 ], [ 0.000000e+00, %1551 ]
  %1746 = phi float [ %1728, %1695 ], [ 0.000000e+00, %1551 ]
  %1747 = phi float [ %1731, %1695 ], [ 0.000000e+00, %1551 ]
  %1748 = phi float [ %1734, %1695 ], [ %1557, %1551 ]
  %1749 = phi float [ %1737, %1695 ], [ %1560, %1551 ]
  %1750 = phi float [ %1740, %1695 ], [ %1563, %1551 ]
  %1751 = fsub fast float %1008, %1009
  %1752 = fsub fast float %1011, %1012
  %1753 = fsub fast float %1007, %1009
  %1754 = fsub fast float %1010, %1012
  %1755 = fmul fast float %1481, %1751
  %1756 = fmul fast float %1481, %1752
  %1757 = fadd fast float %1755, %1009
  %1758 = fadd fast float %1756, %1012
  %1759 = fmul fast float %1492, %1753
  %1760 = fmul fast float %1492, %1754
  %1761 = fadd fast float %1757, %1759
  %1762 = fadd fast float %1758, %1760
  %1763 = fmul fast float %1510, %1751
  %1764 = fmul fast float %1510, %1752
  %1765 = fmul fast float %1512, %1753
  %1766 = fmul fast float %1512, %1754
  %1767 = fadd fast float %1765, %1763
  %1768 = fadd fast float %1766, %1764
  %1769 = fmul fast float %1528, %1751
  %1770 = fmul fast float %1528, %1752
  %1771 = fmul fast float %1530, %1753
  %1772 = fmul fast float %1530, %1754
  %1773 = fadd fast float %1771, %1769
  %1774 = fadd fast float %1772, %1770
  %1775 = fsub fast float %1203, %1204
  %1776 = fsub fast float %1206, %1207
  %1777 = fsub fast float %1202, %1204
  %1778 = fsub fast float %1205, %1207
  %1779 = fmul fast float %1481, %1775
  %1780 = fmul fast float %1481, %1776
  %1781 = fadd fast float %1779, %1204
  %1782 = fadd fast float %1780, %1207
  %1783 = fmul fast float %1492, %1777
  %1784 = fmul fast float %1492, %1778
  %1785 = fadd fast float %1781, %1783
  %1786 = fadd fast float %1782, %1784
  %1787 = fmul fast float %1510, %1775
  %1788 = fmul fast float %1510, %1776
  %1789 = fmul fast float %1512, %1777
  %1790 = fmul fast float %1512, %1778
  %1791 = fadd fast float %1789, %1787
  %1792 = fadd fast float %1790, %1788
  %1793 = fmul fast float %1528, %1775
  %1794 = fmul fast float %1528, %1776
  %1795 = fmul fast float %1530, %1777
  %1796 = fmul fast float %1530, %1778
  %1797 = fadd fast float %1795, %1793
  %1798 = fadd fast float %1796, %1794
  %1799 = fmul fast float %1494, %1435
  %1800 = fmul fast float %1494, %1436
  %1801 = fmul fast float %1494, %1437
  %1802 = fmul fast float %1481, %1438
  %1803 = fmul fast float %1481, %1439
  %1804 = fmul fast float %1481, %1440
  %1805 = fmul fast float %1492, %1441
  %1806 = fmul fast float %1492, %1442
  %1807 = fmul fast float %1492, %1443
  %1808 = fadd fast float %1805, %1802
  %1809 = fadd fast float %1808, %1799
  %1810 = fadd fast float %1806, %1803
  %1811 = fadd fast float %1810, %1800
  %1812 = fadd fast float %1807, %1804
  %1813 = fadd fast float %1812, %1801
  br label %1814

; <label>:1814                                    ; preds = %1741, %0
  %1815 = phi float [ %1768, %1741 ], [ 0.000000e+00, %0 ]
  %1816 = phi float [ %1792, %1741 ], [ 0.000000e+00, %0 ]
  %1817 = phi float [ %1767, %1741 ], [ 0.000000e+00, %0 ]
  %1818 = phi float [ %1791, %1741 ], [ 0.000000e+00, %0 ]
  %1819 = phi float [ %1774, %1741 ], [ 0.000000e+00, %0 ]
  %1820 = phi float [ %1798, %1741 ], [ 0.000000e+00, %0 ]
  %1821 = phi float [ %1773, %1741 ], [ 0.000000e+00, %0 ]
  %1822 = phi float [ %1797, %1741 ], [ 0.000000e+00, %0 ]
  %1823 = phi float [ %1762, %1741 ], [ 0.000000e+00, %0 ]
  %1824 = phi float [ %1786, %1741 ], [ 0.000000e+00, %0 ]
  %1825 = phi float [ %1761, %1741 ], [ 0.000000e+00, %0 ]
  %1826 = phi float [ %1785, %1741 ], [ 0.000000e+00, %0 ]
  %1827 = phi float [ %1742, %1741 ], [ 1.000000e+00, %0 ]
  %1828 = phi float [ %1743, %1741 ], [ 0.000000e+00, %0 ]
  %1829 = phi float [ %1744, %1741 ], [ 0.000000e+00, %0 ]
  %1830 = phi float [ %1745, %1741 ], [ 0.000000e+00, %0 ]
  %1831 = phi float [ %1746, %1741 ], [ 1.000000e+00, %0 ]
  %1832 = phi float [ %1747, %1741 ], [ 0.000000e+00, %0 ]
  %1833 = phi float [ %1748, %1741 ], [ 0.000000e+00, %0 ]
  %1834 = phi float [ %1749, %1741 ], [ 0.000000e+00, %0 ]
  %1835 = phi float [ %1750, %1741 ], [ 1.000000e+00, %0 ]
  %1836 = phi float [ %1809, %1741 ], [ 0.000000e+00, %0 ]
  %1837 = phi float [ %1811, %1741 ], [ 0.000000e+00, %0 ]
  %1838 = phi float [ %1813, %1741 ], [ 0.000000e+00, %0 ]
  %1839 = phi i32 [ %122, %1741 ], [ 0, %0 ]
  %1840 = fsub fast float %1836, %63
  %1841 = fsub fast float %1837, %64
  %1842 = fsub fast float %1838, %65
  %1843 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1844 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %44, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1845 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1843, %dx.types.Handle %1844, float %1826, float %1824, float undef, float undef, i32 0, i32 0, i32 undef, float %1818, float %1816, float undef, float %1822, float %1820, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1846 = extractvalue %dx.types.ResRet.f32 %1845, 0
  %1847 = extractvalue %dx.types.ResRet.f32 %1845, 1
  %1848 = extractvalue %dx.types.ResRet.f32 %1845, 2
  %1849 = extractvalue %dx.types.ResRet.f32 %1845, 3
  %1850 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %50, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1851 = extractvalue %dx.types.CBufRet.f32 %1850, 0
  %1852 = extractvalue %dx.types.CBufRet.f32 %1850, 1
  %1853 = extractvalue %dx.types.CBufRet.f32 %1850, 2
  %1854 = extractvalue %dx.types.CBufRet.f32 %1850, 3
  %1855 = call float @dx.op.dot4.f32(i32 56, float %1846, float %1847, float %1848, float %1849, float %1851, float %1852, float %1853, float %1854)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1856 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %50, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1857 = extractvalue %dx.types.CBufRet.f32 %1856, 0
  %1858 = extractvalue %dx.types.CBufRet.f32 %1856, 1
  %1859 = extractvalue %dx.types.CBufRet.f32 %1856, 2
  %1860 = extractvalue %dx.types.CBufRet.f32 %1856, 3
  %1861 = call float @dx.op.dot4.f32(i32 56, float %1846, float %1847, float %1848, float %1849, float %1857, float %1858, float %1859, float %1860)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1862 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %50, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1863 = extractvalue %dx.types.CBufRet.f32 %1862, 0
  %1864 = extractvalue %dx.types.CBufRet.f32 %1862, 1
  %1865 = extractvalue %dx.types.CBufRet.f32 %1862, 2
  %1866 = extractvalue %dx.types.CBufRet.f32 %1862, 3
  %1867 = call float @dx.op.dot4.f32(i32 56, float %1846, float %1847, float %1848, float %1849, float %1863, float %1864, float %1865, float %1866)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1868 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %50, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1869 = extractvalue %dx.types.CBufRet.f32 %1868, 0
  %1870 = extractvalue %dx.types.CBufRet.f32 %1868, 1
  %1871 = extractvalue %dx.types.CBufRet.f32 %1868, 2
  %1872 = extractvalue %dx.types.CBufRet.f32 %1868, 3
  %1873 = call float @dx.op.dot4.f32(i32 56, float %1846, float %1847, float %1848, float %1849, float %1869, float %1870, float %1871, float %1872)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1874 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1875 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1874, %dx.types.Handle %1844, float %1826, float %1824, float undef, float undef, i32 0, i32 0, i32 undef, float %1818, float %1816, float undef, float %1822, float %1820, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1876 = extractvalue %dx.types.ResRet.f32 %1875, 0
  %1877 = extractvalue %dx.types.ResRet.f32 %1875, 1
  %1878 = extractvalue %dx.types.ResRet.f32 %1875, 2
  %1879 = extractvalue %dx.types.ResRet.f32 %1875, 3
  %1880 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %50, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1881 = extractvalue %dx.types.CBufRet.f32 %1880, 0
  %1882 = extractvalue %dx.types.CBufRet.f32 %1880, 1
  %1883 = extractvalue %dx.types.CBufRet.f32 %1880, 2
  %1884 = extractvalue %dx.types.CBufRet.f32 %1880, 3
  %1885 = call float @dx.op.dot4.f32(i32 56, float %1876, float %1877, float %1878, float %1879, float %1881, float %1882, float %1883, float %1884)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1886 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %50, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1887 = extractvalue %dx.types.CBufRet.f32 %1886, 0
  %1888 = fmul fast float %1887, %1825
  %1889 = fmul fast float %1887, %1823
  %1890 = fmul fast float %1887, %1817
  %1891 = fmul fast float %1887, %1815
  %1892 = fmul fast float %1887, %1821
  %1893 = fmul fast float %1887, %1819
  %1894 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 140)  ; CBufferLoadLegacy(handle,regIndex)
  %1895 = extractvalue %dx.types.CBufRet.f32 %1894, 0
  %1896 = call float @dx.op.unary.f32(i32 21, float %1895)  ; Exp(value)
  %1897 = fmul fast float %1892, %1896
  %1898 = fmul fast float %1893, %1896
  %1899 = fmul fast float %1896, %1890
  %1900 = fmul fast float %1896, %1891
  %1901 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1902 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %42, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1903 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1901, %dx.types.Handle %1902, float %1888, float %1889, float undef, float undef, i32 0, i32 0, i32 undef, float %1899, float %1900, float undef, float %1897, float %1898, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1904 = extractvalue %dx.types.ResRet.f32 %1903, 0
  %1905 = extractvalue %dx.types.ResRet.f32 %1903, 1
  %1906 = fmul fast float %1904, 2.000000e+00
  %1907 = fmul fast float %1905, 2.000000e+00
  %1908 = fadd fast float %1906, -1.000000e+00
  %1909 = fadd fast float %1907, -1.000000e+00
  %1910 = call float @dx.op.dot2.f32(i32 54, float %1908, float %1909, float %1908, float %1909)  ; Dot2(ax,ay,bx,by)
  %1911 = fsub fast float 1.000000e+00, %1910
  %1912 = call float @dx.op.unary.f32(i32 7, float %1911)  ; Saturate(value)
  %1913 = call float @dx.op.unary.f32(i32 24, float %1912)  ; Sqrt(value)
  %1914 = fmul fast float %1908, %1855
  %1915 = fmul fast float %1909, %1855
  %1916 = fmul fast float %1913, %1855
  %1917 = extractvalue %dx.types.CBufRet.f32 %1886, 1
  %1918 = fmul fast float %1917, %1825
  %1919 = fmul fast float %1917, %1823
  %1920 = fmul fast float %1917, %1817
  %1921 = fmul fast float %1917, %1815
  %1922 = fmul fast float %1917, %1821
  %1923 = fmul fast float %1917, %1819
  %1924 = fmul fast float %1922, %1896
  %1925 = fmul fast float %1923, %1896
  %1926 = fmul fast float %1896, %1920
  %1927 = fmul fast float %1896, %1921
  %1928 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1929 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %41, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1930 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1928, %dx.types.Handle %1929, float %1918, float %1919, float undef, float undef, i32 0, i32 0, i32 undef, float %1926, float %1927, float undef, float %1924, float %1925, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1931 = extractvalue %dx.types.ResRet.f32 %1930, 0
  %1932 = extractvalue %dx.types.ResRet.f32 %1930, 1
  %1933 = fmul fast float %1931, 2.000000e+00
  %1934 = fmul fast float %1932, 2.000000e+00
  %1935 = fadd fast float %1933, -1.000000e+00
  %1936 = fadd fast float %1934, -1.000000e+00
  %1937 = call float @dx.op.dot2.f32(i32 54, float %1935, float %1936, float %1935, float %1936)  ; Dot2(ax,ay,bx,by)
  %1938 = fsub fast float 1.000000e+00, %1937
  %1939 = call float @dx.op.unary.f32(i32 7, float %1938)  ; Saturate(value)
  %1940 = call float @dx.op.unary.f32(i32 24, float %1939)  ; Sqrt(value)
  %1941 = fmul fast float %1935, %1861
  %1942 = fmul fast float %1936, %1861
  %1943 = fmul fast float %1940, %1861
  %1944 = fadd fast float %1941, %1914
  %1945 = fadd fast float %1942, %1915
  %1946 = fadd fast float %1943, %1916
  %1947 = extractvalue %dx.types.CBufRet.f32 %1886, 2
  %1948 = fmul fast float %1947, %1825
  %1949 = fmul fast float %1947, %1823
  %1950 = fmul fast float %1947, %1817
  %1951 = fmul fast float %1947, %1815
  %1952 = fmul fast float %1947, %1821
  %1953 = fmul fast float %1947, %1819
  %1954 = fmul fast float %1952, %1896
  %1955 = fmul fast float %1953, %1896
  %1956 = fmul fast float %1896, %1950
  %1957 = fmul fast float %1896, %1951
  %1958 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1959 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %40, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1960 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1958, %dx.types.Handle %1959, float %1948, float %1949, float undef, float undef, i32 0, i32 0, i32 undef, float %1956, float %1957, float undef, float %1954, float %1955, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1961 = extractvalue %dx.types.ResRet.f32 %1960, 0
  %1962 = extractvalue %dx.types.ResRet.f32 %1960, 1
  %1963 = fmul fast float %1961, 2.000000e+00
  %1964 = fmul fast float %1962, 2.000000e+00
  %1965 = fadd fast float %1963, -1.000000e+00
  %1966 = fadd fast float %1964, -1.000000e+00
  %1967 = call float @dx.op.dot2.f32(i32 54, float %1965, float %1966, float %1965, float %1966)  ; Dot2(ax,ay,bx,by)
  %1968 = fsub fast float 1.000000e+00, %1967
  %1969 = call float @dx.op.unary.f32(i32 7, float %1968)  ; Saturate(value)
  %1970 = call float @dx.op.unary.f32(i32 24, float %1969)  ; Sqrt(value)
  %1971 = fmul fast float %1965, %1867
  %1972 = fmul fast float %1966, %1867
  %1973 = fmul fast float %1970, %1867
  %1974 = fadd fast float %1944, %1971
  %1975 = fadd fast float %1945, %1972
  %1976 = fadd fast float %1946, %1973
  %1977 = extractvalue %dx.types.CBufRet.f32 %1886, 3
  %1978 = fmul fast float %1977, %1825
  %1979 = fmul fast float %1977, %1823
  %1980 = fmul fast float %1977, %1817
  %1981 = fmul fast float %1977, %1815
  %1982 = fmul fast float %1977, %1821
  %1983 = fmul fast float %1977, %1819
  %1984 = fmul fast float %1982, %1896
  %1985 = fmul fast float %1983, %1896
  %1986 = fmul fast float %1896, %1980
  %1987 = fmul fast float %1896, %1981
  %1988 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1989 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %39, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1990 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1988, %dx.types.Handle %1989, float %1978, float %1979, float undef, float undef, i32 0, i32 0, i32 undef, float %1986, float %1987, float undef, float %1984, float %1985, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1991 = extractvalue %dx.types.ResRet.f32 %1990, 0
  %1992 = extractvalue %dx.types.ResRet.f32 %1990, 1
  %1993 = fmul fast float %1991, 2.000000e+00
  %1994 = fmul fast float %1992, 2.000000e+00
  %1995 = fadd fast float %1993, -1.000000e+00
  %1996 = fadd fast float %1994, -1.000000e+00
  %1997 = call float @dx.op.dot2.f32(i32 54, float %1995, float %1996, float %1995, float %1996)  ; Dot2(ax,ay,bx,by)
  %1998 = fsub fast float 1.000000e+00, %1997
  %1999 = call float @dx.op.unary.f32(i32 7, float %1998)  ; Saturate(value)
  %2000 = call float @dx.op.unary.f32(i32 24, float %1999)  ; Sqrt(value)
  %2001 = fmul fast float %1995, %1873
  %2002 = fmul fast float %1996, %1873
  %2003 = fmul fast float %2000, %1873
  %2004 = fadd fast float %1974, %2001
  %2005 = fadd fast float %1975, %2002
  %2006 = fadd fast float %1976, %2003
  %2007 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %50, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %2008 = extractvalue %dx.types.CBufRet.f32 %2007, 0
  %2009 = fmul fast float %2008, %1825
  %2010 = fmul fast float %2008, %1823
  %2011 = fmul fast float %2008, %1817
  %2012 = fmul fast float %2008, %1815
  %2013 = fmul fast float %2008, %1821
  %2014 = fmul fast float %2008, %1819
  %2015 = fmul fast float %2013, %1896
  %2016 = fmul fast float %2014, %1896
  %2017 = fmul fast float %1896, %2011
  %2018 = fmul fast float %1896, %2012
  %2019 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2020 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %38, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2021 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %2019, %dx.types.Handle %2020, float %2009, float %2010, float undef, float undef, i32 0, i32 0, i32 undef, float %2017, float %2018, float undef, float %2015, float %2016, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %2022 = extractvalue %dx.types.ResRet.f32 %2021, 0
  %2023 = extractvalue %dx.types.ResRet.f32 %2021, 1
  %2024 = fmul fast float %2022, 2.000000e+00
  %2025 = fmul fast float %2023, 2.000000e+00
  %2026 = fadd fast float %2024, -1.000000e+00
  %2027 = fadd fast float %2025, -1.000000e+00
  %2028 = call float @dx.op.dot2.f32(i32 54, float %2026, float %2027, float %2026, float %2027)  ; Dot2(ax,ay,bx,by)
  %2029 = fsub fast float 1.000000e+00, %2028
  %2030 = call float @dx.op.unary.f32(i32 7, float %2029)  ; Saturate(value)
  %2031 = call float @dx.op.unary.f32(i32 24, float %2030)  ; Sqrt(value)
  %2032 = fmul fast float %2026, %1885
  %2033 = fmul fast float %2027, %1885
  %2034 = fmul fast float %2031, %1885
  %2035 = fadd fast float %2004, %2032
  %2036 = fadd fast float %2005, %2033
  %2037 = fadd fast float %2006, %2034
  %2038 = fmul fast float %2035, %70
  %2039 = fmul fast float %2036, %70
  %2040 = fmul fast float %2037, %70
  %2041 = fadd fast float %2038, %67
  %2042 = fadd fast float %2039, %68
  %2043 = fadd fast float %2040, %69
  %2044 = call float @dx.op.dot3.f32(i32 55, float %2041, float %2042, float %2043, float %2041, float %2042, float %2043)  ; Dot3(ax,ay,az,bx,by,bz)
  %2045 = call float @dx.op.unary.f32(i32 25, float %2044)  ; Rsqrt(value)
  %2046 = fmul fast float %2041, %2045
  %2047 = fmul fast float %2042, %2045
  %2048 = fmul fast float %2043, %2045
  %2049 = fmul fast float %2046, %1827
  %2050 = call float @dx.op.tertiary.f32(i32 46, float %2047, float %1830, float %2049)  ; FMad(a,b,c)
  %2051 = call float @dx.op.tertiary.f32(i32 46, float %2048, float %1833, float %2050)  ; FMad(a,b,c)
  %2052 = fmul fast float %2046, %1828
  %2053 = call float @dx.op.tertiary.f32(i32 46, float %2047, float %1831, float %2052)  ; FMad(a,b,c)
  %2054 = call float @dx.op.tertiary.f32(i32 46, float %2048, float %1834, float %2053)  ; FMad(a,b,c)
  %2055 = fmul fast float %2046, %1829
  %2056 = call float @dx.op.tertiary.f32(i32 46, float %2047, float %1832, float %2055)  ; FMad(a,b,c)
  %2057 = call float @dx.op.tertiary.f32(i32 46, float %2048, float %1835, float %2056)  ; FMad(a,b,c)
  %2058 = call float @dx.op.dot3.f32(i32 55, float %2051, float %2054, float %2057, float %2051, float %2054, float %2057)  ; Dot3(ax,ay,az,bx,by,bz)
  %2059 = call float @dx.op.unary.f32(i32 25, float %2058)  ; Rsqrt(value)
  %2060 = fmul fast float %2059, %2051
  %2061 = fmul fast float %2059, %2054
  %2062 = fmul fast float %2059, %2057
  %2063 = extractvalue %dx.types.CBufRet.f32 %2007, 1
  %2064 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %50, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %2065 = extractvalue %dx.types.CBufRet.f32 %2064, 0
  %2066 = extractvalue %dx.types.CBufRet.f32 %2064, 1
  %2067 = extractvalue %dx.types.CBufRet.f32 %2064, 2
  %2068 = fmul fast float %2065, %2063
  %2069 = fmul fast float %2066, %2063
  %2070 = fmul fast float %2067, %2063
  %2071 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2072 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2073 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %2071, %dx.types.Handle %2072, float %1888, float %1889, float undef, float undef, i32 0, i32 0, i32 undef, float %1899, float %1900, float undef, float %1897, float %1898, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %2074 = extractvalue %dx.types.ResRet.f32 %2073, 0
  %2075 = extractvalue %dx.types.ResRet.f32 %2073, 1
  %2076 = extractvalue %dx.types.ResRet.f32 %2073, 2
  %2077 = fmul fast float %2074, %1855
  %2078 = fmul fast float %2075, %1855
  %2079 = fmul fast float %2076, %1855
  %2080 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2081 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2082 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %2080, %dx.types.Handle %2081, float %1918, float %1919, float undef, float undef, i32 0, i32 0, i32 undef, float %1926, float %1927, float undef, float %1924, float %1925, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %2083 = extractvalue %dx.types.ResRet.f32 %2082, 0
  %2084 = extractvalue %dx.types.ResRet.f32 %2082, 1
  %2085 = extractvalue %dx.types.ResRet.f32 %2082, 2
  %2086 = fmul fast float %2083, %1861
  %2087 = fmul fast float %2084, %1861
  %2088 = fmul fast float %2085, %1861
  %2089 = fadd fast float %2086, %2077
  %2090 = fadd fast float %2087, %2078
  %2091 = fadd fast float %2088, %2079
  %2092 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2093 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2094 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %2092, %dx.types.Handle %2093, float %1948, float %1949, float undef, float undef, i32 0, i32 0, i32 undef, float %1956, float %1957, float undef, float %1954, float %1955, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %2095 = extractvalue %dx.types.ResRet.f32 %2094, 0
  %2096 = extractvalue %dx.types.ResRet.f32 %2094, 1
  %2097 = extractvalue %dx.types.ResRet.f32 %2094, 2
  %2098 = fmul fast float %2095, %1867
  %2099 = fmul fast float %2096, %1867
  %2100 = fmul fast float %2097, %1867
  %2101 = fadd fast float %2089, %2098
  %2102 = fadd fast float %2090, %2099
  %2103 = fadd fast float %2091, %2100
  %2104 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2105 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2106 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %2104, %dx.types.Handle %2105, float %1978, float %1979, float undef, float undef, i32 0, i32 0, i32 undef, float %1986, float %1987, float undef, float %1984, float %1985, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %2107 = extractvalue %dx.types.ResRet.f32 %2106, 0
  %2108 = extractvalue %dx.types.ResRet.f32 %2106, 1
  %2109 = extractvalue %dx.types.ResRet.f32 %2106, 2
  %2110 = fmul fast float %2107, %1873
  %2111 = fmul fast float %2108, %1873
  %2112 = fmul fast float %2109, %1873
  %2113 = fadd fast float %2101, %2110
  %2114 = fadd fast float %2102, %2111
  %2115 = fadd fast float %2103, %2112
  %2116 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2117 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2118 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %2116, %dx.types.Handle %2117, float %2009, float %2010, float undef, float undef, i32 0, i32 0, i32 undef, float %2017, float %2018, float undef, float %2015, float %2016, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %2119 = extractvalue %dx.types.ResRet.f32 %2118, 0
  %2120 = extractvalue %dx.types.ResRet.f32 %2118, 1
  %2121 = extractvalue %dx.types.ResRet.f32 %2118, 2
  %2122 = fmul fast float %2119, %1885
  %2123 = fmul fast float %2120, %1885
  %2124 = fmul fast float %2121, %1885
  %2125 = fadd fast float %2113, %2122
  %2126 = fadd fast float %2114, %2123
  %2127 = fadd fast float %2115, %2124
  %2128 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2129 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2130 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %2128, %dx.types.Handle %2129, float %1888, float %1889, float undef, float undef, i32 0, i32 0, i32 undef, float %1899, float %1900, float undef, float %1897, float %1898, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %2131 = extractvalue %dx.types.ResRet.f32 %2130, 1
  %2132 = fmul fast float %2131, %1855
  %2133 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2134 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2135 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %2133, %dx.types.Handle %2134, float %1918, float %1919, float undef, float undef, i32 0, i32 0, i32 undef, float %1926, float %1927, float undef, float %1924, float %1925, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %2136 = extractvalue %dx.types.ResRet.f32 %2135, 1
  %2137 = fmul fast float %2136, %1861
  %2138 = fadd fast float %2137, %2132
  %2139 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2140 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2141 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %2139, %dx.types.Handle %2140, float %1948, float %1949, float undef, float undef, i32 0, i32 0, i32 undef, float %1956, float %1957, float undef, float %1954, float %1955, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %2142 = extractvalue %dx.types.ResRet.f32 %2141, 1
  %2143 = fmul fast float %2142, %1867
  %2144 = fadd fast float %2138, %2143
  %2145 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2146 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2147 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %2145, %dx.types.Handle %2146, float %1978, float %1979, float undef, float undef, i32 0, i32 0, i32 undef, float %1986, float %1987, float undef, float %1984, float %1985, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %2148 = extractvalue %dx.types.ResRet.f32 %2147, 1
  %2149 = fmul fast float %2148, %1873
  %2150 = fadd fast float %2144, %2149
  %2151 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2152 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2153 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %2151, %dx.types.Handle %2152, float %2009, float %2010, float undef, float undef, i32 0, i32 0, i32 undef, float %2017, float %2018, float undef, float %2015, float %2016, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %2154 = extractvalue %dx.types.ResRet.f32 %2153, 1
  %2155 = fmul fast float %2154, %1885
  %2156 = fadd fast float %2150, %2155
  %2157 = call float @dx.op.unary.f32(i32 7, float %2125)  ; Saturate(value)
  %2158 = call float @dx.op.unary.f32(i32 7, float %2126)  ; Saturate(value)
  %2159 = call float @dx.op.unary.f32(i32 7, float %2127)  ; Saturate(value)
  %2160 = call float @dx.op.unary.f32(i32 7, float %2156)  ; Saturate(value)
  %2161 = fmul fast float %2160, %73
  %2162 = fadd fast float %2161, %72
  %2163 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %2164 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2163, i32 %1839, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2165 = extractvalue %dx.types.ResRet.f32 %2164, 0
  %2166 = bitcast float %2165 to i32
  %2167 = and i32 %2166, 8
  %2168 = icmp ne i32 %2167, 0
  %2169 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 192)  ; CBufferLoadLegacy(handle,regIndex)
  %2170 = extractvalue %dx.types.CBufRet.f32 %2169, 3
  %2171 = fcmp fast ogt float %2170, 0.000000e+00
  %2172 = and i1 %2171, %2168
  br i1 %2172, label %2173, label %2225, !dx.controlflow.hints !86

; <label>:2173                                    ; preds = %1814
  %2174 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %2175 = extractvalue %dx.types.CBufRet.f32 %2174, 2
  %2176 = extractvalue %dx.types.CBufRet.f32 %2174, 3
  %2177 = fmul fast float %2175, %53
  %2178 = fmul fast float %2176, %54
  %2179 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2180 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %43, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2181 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2179, %dx.types.Handle %2180, float %2177, float %2178, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2182 = extractvalue %dx.types.ResRet.f32 %2181, 0
  %2183 = extractvalue %dx.types.ResRet.f32 %2181, 1
  %2184 = extractvalue %dx.types.ResRet.f32 %2181, 2
  %2185 = extractvalue %dx.types.ResRet.f32 %2181, 3
  %2186 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2187 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2186, %dx.types.Handle %2180, float %2177, float %2178, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2188 = extractvalue %dx.types.ResRet.f32 %2187, 0
  %2189 = extractvalue %dx.types.ResRet.f32 %2187, 1
  %2190 = extractvalue %dx.types.ResRet.f32 %2187, 2
  %2191 = extractvalue %dx.types.ResRet.f32 %2187, 3
  %2192 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2193 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2192, %dx.types.Handle %2180, float %2177, float %2178, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2194 = extractvalue %dx.types.ResRet.f32 %2193, 0
  %2195 = extractvalue %dx.types.ResRet.f32 %2193, 1
  %2196 = extractvalue %dx.types.ResRet.f32 %2193, 2
  %2197 = extractvalue %dx.types.ResRet.f32 %2193, 3
  %2198 = fmul fast float %2188, 2.000000e+00
  %2199 = fmul fast float %2189, 2.000000e+00
  %2200 = fmul fast float %2190, 2.000000e+00
  %2201 = fadd fast float %2198, 0xBFF0101020000000
  %2202 = fadd fast float %2199, 0xBFF0101020000000
  %2203 = fadd fast float %2200, 0xBFF0101020000000
  %2204 = fmul fast float %2185, %2157
  %2205 = fmul fast float %2185, %2158
  %2206 = fmul fast float %2185, %2159
  %2207 = fadd fast float %2204, %2182
  %2208 = fadd fast float %2205, %2183
  %2209 = fadd fast float %2206, %2184
  %2210 = fmul fast float %2191, %2060
  %2211 = fmul fast float %2191, %2061
  %2212 = fmul fast float %2191, %2062
  %2213 = fadd fast float %2201, %2210
  %2214 = fadd fast float %2202, %2211
  %2215 = fadd fast float %2203, %2212
  %2216 = call float @dx.op.dot3.f32(i32 55, float %2213, float %2214, float %2215, float %2213, float %2214, float %2215)  ; Dot3(ax,ay,az,bx,by,bz)
  %2217 = call float @dx.op.unary.f32(i32 25, float %2216)  ; Rsqrt(value)
  %2218 = fmul fast float %2217, %2213
  %2219 = fmul fast float %2217, %2214
  %2220 = fmul fast float %2217, %2215
  %2221 = fmul fast float %2197, %2162
  %2222 = fadd fast float %2221, %2196
  %2223 = fmul fast float %2197, 5.000000e-01
  %2224 = fadd fast float %2223, %2195
  br label %2225

; <label>:2225                                    ; preds = %2173, %1814
  %2226 = phi float [ %2218, %2173 ], [ %2060, %1814 ]
  %2227 = phi float [ %2219, %2173 ], [ %2061, %1814 ]
  %2228 = phi float [ %2220, %2173 ], [ %2062, %1814 ]
  %2229 = phi float [ %2207, %2173 ], [ %2157, %1814 ]
  %2230 = phi float [ %2208, %2173 ], [ %2158, %1814 ]
  %2231 = phi float [ %2209, %2173 ], [ %2159, %1814 ]
  %2232 = phi float [ %2194, %2173 ], [ 0.000000e+00, %1814 ]
  %2233 = phi float [ %2224, %2173 ], [ 5.000000e-01, %1814 ]
  %2234 = phi float [ %2222, %2173 ], [ %2162, %1814 ]
  %2235 = and i32 %2166, 256
  %2236 = icmp ne i32 %2235, 0
  %2237 = and i32 %2166, 512
  %2238 = icmp ne i32 %2237, 0
  %2239 = select i1 %2238, float 1.000000e+00, float 0.000000e+00
  %2240 = select i1 %2236, float 2.000000e+00, float 0.000000e+00
  %2241 = fadd fast float %2240, %2239
  %2242 = fmul fast float %2241, 0x3FD5555560000000
  %2243 = and i32 %2166, 4
  %2244 = icmp eq i32 %2243, 0
  br i1 %2244, label %2323, label %2245, !dx.controlflow.hints !87

; <label>:2245                                    ; preds = %2225
  %2246 = fmul fast float %59, 2.097152e+06
  %2247 = fmul fast float %60, 2.097152e+06
  %2248 = fmul fast float %61, 2.097152e+06
  %2249 = fadd fast float %1840, %2246
  %2250 = fadd fast float %1841, %2247
  %2251 = fadd fast float %1842, %2248
  %2252 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 231)  ; CBufferLoadLegacy(handle,regIndex)
  %2253 = extractvalue %dx.types.CBufRet.f32 %2252, 0
  %2254 = extractvalue %dx.types.CBufRet.f32 %2252, 1
  %2255 = extractvalue %dx.types.CBufRet.f32 %2252, 2
  %2256 = fmul fast float %2253, %2249
  %2257 = fmul fast float %2254, %2250
  %2258 = fmul fast float %2255, %2251
  %2259 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 232)  ; CBufferLoadLegacy(handle,regIndex)
  %2260 = extractvalue %dx.types.CBufRet.f32 %2259, 0
  %2261 = extractvalue %dx.types.CBufRet.f32 %2259, 1
  %2262 = extractvalue %dx.types.CBufRet.f32 %2259, 2
  %2263 = fadd fast float %2256, %2260
  %2264 = fadd fast float %2257, %2261
  %2265 = fadd fast float %2258, %2262
  %2266 = call float @dx.op.binary.f32(i32 35, float %2263, float 0.000000e+00)  ; FMax(a,b)
  %2267 = call float @dx.op.binary.f32(i32 35, float %2264, float 0.000000e+00)  ; FMax(a,b)
  %2268 = call float @dx.op.binary.f32(i32 35, float %2265, float 0.000000e+00)  ; FMax(a,b)
  %2269 = call float @dx.op.binary.f32(i32 36, float %2266, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %2270 = call float @dx.op.binary.f32(i32 36, float %2267, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %2271 = call float @dx.op.binary.f32(i32 36, float %2268, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %2272 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 233)  ; CBufferLoadLegacy(handle,regIndex)
  %2273 = extractvalue %dx.types.CBufRet.f32 %2272, 0
  %2274 = extractvalue %dx.types.CBufRet.f32 %2272, 1
  %2275 = extractvalue %dx.types.CBufRet.f32 %2272, 2
  %2276 = fmul fast float %2273, %2269
  %2277 = fmul fast float %2274, %2270
  %2278 = fmul fast float %2275, %2271
  %2279 = fptosi float %2276 to i32
  %2280 = fptosi float %2277 to i32
  %2281 = fptosi float %2278 to i32
  %2282 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 4, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xU32>
  %2283 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2282, i32 0, i32 %2279, i32 %2280, i32 %2281, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2284 = extractvalue %dx.types.ResRet.i32 %2283, 0
  %2285 = extractvalue %dx.types.ResRet.i32 %2283, 1
  %2286 = extractvalue %dx.types.ResRet.i32 %2283, 2
  %2287 = extractvalue %dx.types.ResRet.i32 %2283, 3
  %2288 = uitofp i32 %2284 to float
  %2289 = uitofp i32 %2285 to float
  %2290 = uitofp i32 %2286 to float
  %2291 = uitofp i32 %2287 to float
  %2292 = extractvalue %dx.types.CBufRet.f32 %2272, 3
  %2293 = fadd fast float %2292, 1.000000e+00
  %2294 = fmul fast float %2293, %2288
  %2295 = fmul fast float %2293, %2289
  %2296 = fmul fast float %2293, %2290
  %2297 = fdiv fast float %2276, %2291
  %2298 = fdiv fast float %2277, %2291
  %2299 = fdiv fast float %2278, %2291
  %2300 = call float @dx.op.unary.f32(i32 22, float %2297)  ; Frc(value)
  %2301 = call float @dx.op.unary.f32(i32 22, float %2298)  ; Frc(value)
  %2302 = call float @dx.op.unary.f32(i32 22, float %2299)  ; Frc(value)
  %2303 = fmul fast float %2292, %2300
  %2304 = fmul fast float %2292, %2301
  %2305 = fmul fast float %2292, %2302
  %2306 = fadd fast float %2294, 5.000000e-01
  %2307 = fadd fast float %2306, %2303
  %2308 = fadd fast float %2295, 5.000000e-01
  %2309 = fadd fast float %2308, %2304
  %2310 = fadd fast float %2296, 5.000000e-01
  %2311 = fadd fast float %2310, %2305
  %2312 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 234)  ; CBufferLoadLegacy(handle,regIndex)
  %2313 = extractvalue %dx.types.CBufRet.f32 %2312, 0
  %2314 = extractvalue %dx.types.CBufRet.f32 %2312, 1
  %2315 = extractvalue %dx.types.CBufRet.f32 %2312, 2
  %2316 = fmul fast float %2307, %2313
  %2317 = fmul fast float %2309, %2314
  %2318 = fmul fast float %2311, %2315
  %2319 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2320 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %45, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2321 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2319, %dx.types.Handle %2320, float %2316, float %2317, float %2318, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2322 = extractvalue %dx.types.ResRet.f32 %2321, 0
  br label %2323

; <label>:2323                                    ; preds = %2245, %2225
  %2324 = phi float [ %2322, %2245 ], [ 1.000000e+00, %2225 ]
  %2325 = fmul fast float %2233, 0x3FB47AE140000000
  %2326 = fsub fast float %2229, %2325
  %2327 = fsub fast float %2230, %2325
  %2328 = fsub fast float %2231, %2325
  %2329 = fmul fast float %2326, %2232
  %2330 = fmul fast float %2327, %2232
  %2331 = fmul fast float %2328, %2232
  %2332 = fadd fast float %2329, %2325
  %2333 = fadd fast float %2330, %2325
  %2334 = fadd fast float %2331, %2325
  %2335 = fmul fast float %2232, %2229
  %2336 = fmul fast float %2232, %2230
  %2337 = fmul fast float %2232, %2231
  %2338 = fsub fast float %2229, %2335
  %2339 = fsub fast float %2230, %2336
  %2340 = fsub fast float %2231, %2337
  %2341 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 133)  ; CBufferLoadLegacy(handle,regIndex)
  %2342 = extractvalue %dx.types.CBufRet.f32 %2341, 3
  %2343 = fmul fast float %2342, %2338
  %2344 = fmul fast float %2342, %2339
  %2345 = fmul fast float %2342, %2340
  %2346 = extractvalue %dx.types.CBufRet.f32 %2341, 0
  %2347 = extractvalue %dx.types.CBufRet.f32 %2341, 1
  %2348 = extractvalue %dx.types.CBufRet.f32 %2341, 2
  %2349 = fadd fast float %2343, %2346
  %2350 = fadd fast float %2344, %2347
  %2351 = fadd fast float %2345, %2348
  %2352 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 134)  ; CBufferLoadLegacy(handle,regIndex)
  %2353 = extractvalue %dx.types.CBufRet.f32 %2352, 3
  %2354 = fmul fast float %2353, %2332
  %2355 = fmul fast float %2353, %2333
  %2356 = fmul fast float %2353, %2334
  %2357 = extractvalue %dx.types.CBufRet.f32 %2352, 0
  %2358 = extractvalue %dx.types.CBufRet.f32 %2352, 1
  %2359 = extractvalue %dx.types.CBufRet.f32 %2352, 2
  %2360 = fadd fast float %2354, %2357
  %2361 = fadd fast float %2355, %2358
  %2362 = fadd fast float %2356, %2359
  %2363 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 179)  ; CBufferLoadLegacy(handle,regIndex)
  %2364 = extractvalue %dx.types.CBufRet.f32 %2363, 3
  %2365 = fcmp fast une float %2364, 0.000000e+00
  %2366 = fmul fast float %2360, 0x3FDCCCCCC0000000
  %2367 = fmul fast float %2361, 0x3FDCCCCCC0000000
  %2368 = fmul fast float %2362, 0x3FDCCCCCC0000000
  %2369 = fadd fast float %2366, %2349
  %2370 = fadd fast float %2367, %2350
  %2371 = fadd fast float %2368, %2351
  %2372 = select i1 %2365, float %2369, float %2349
  %2373 = select i1 %2365, float %2370, float %2350
  %2374 = select i1 %2365, float %2371, float %2351
  %2375 = select i1 %2365, float 0.000000e+00, float %2366
  %2376 = select i1 %2365, float 0.000000e+00, float %2367
  %2377 = select i1 %2365, float 0.000000e+00, float %2368
  %2378 = fadd fast float %2372, %2375
  %2379 = fadd fast float %2373, %2376
  %2380 = fadd fast float %2374, %2377
  %2381 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 142)  ; CBufferLoadLegacy(handle,regIndex)
  %2382 = extractvalue %dx.types.CBufRet.f32 %2381, 2
  %2383 = fmul fast float %2378, %2382
  %2384 = fmul fast float %2379, %2382
  %2385 = fmul fast float %2380, %2382
  %2386 = call float @dx.op.binary.f32(i32 35, float %2068, float 0.000000e+00)  ; FMax(a,b)
  %2387 = call float @dx.op.binary.f32(i32 35, float %2069, float 0.000000e+00)  ; FMax(a,b)
  %2388 = call float @dx.op.binary.f32(i32 35, float %2070, float 0.000000e+00)  ; FMax(a,b)
  %2389 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 137)  ; CBufferLoadLegacy(handle,regIndex)
  %2390 = extractvalue %dx.types.CBufRet.f32 %2389, 0
  %2391 = fcmp fast ogt float %2390, 0.000000e+00
  br i1 %2391, label %2392, label %2459, !dx.controlflow.hints !88

; <label>:2392                                    ; preds = %2323
  %2393 = add nsw i32 %1839, 1
  %2394 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2163, i32 %2393, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2395 = extractvalue %dx.types.ResRet.f32 %2394, 0
  %2396 = extractvalue %dx.types.ResRet.f32 %2394, 1
  %2397 = extractvalue %dx.types.ResRet.f32 %2394, 2
  %2398 = add nsw i32 %1839, 18
  %2399 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2163, i32 %2398, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2400 = extractvalue %dx.types.ResRet.f32 %2399, 0
  %2401 = extractvalue %dx.types.ResRet.f32 %2399, 1
  %2402 = extractvalue %dx.types.ResRet.f32 %2399, 2
  %2403 = add nsw i32 %1839, 17
  %2404 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2163, i32 %2403, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2405 = extractvalue %dx.types.ResRet.f32 %2404, 3
  %2406 = add nsw i32 %1839, 24
  %2407 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2163, i32 %2406, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2408 = extractvalue %dx.types.ResRet.f32 %2407, 3
  %2409 = add nsw i32 %1839, 25
  %2410 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2163, i32 %2409, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2411 = extractvalue %dx.types.ResRet.f32 %2410, 3
  %2412 = add nsw i32 %1839, 31
  %2413 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2163, i32 %2412, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2414 = extractvalue %dx.types.ResRet.f32 %2413, 0
  %2415 = fsub fast float %59, %2395
  %2416 = fsub fast float %60, %2396
  %2417 = fsub fast float %61, %2397
  %2418 = fmul fast float %2415, 2.097152e+06
  %2419 = fmul fast float %2416, 2.097152e+06
  %2420 = fmul fast float %2417, 2.097152e+06
  %2421 = fadd fast float %2418, %1840
  %2422 = fsub fast float %2421, %2400
  %2423 = fadd fast float %2419, %1841
  %2424 = fsub fast float %2423, %2401
  %2425 = fadd fast float %2420, %1842
  %2426 = fsub fast float %2425, %2402
  %2427 = call float @dx.op.unary.f32(i32 6, float %2422)  ; FAbs(value)
  %2428 = call float @dx.op.unary.f32(i32 6, float %2424)  ; FAbs(value)
  %2429 = call float @dx.op.unary.f32(i32 6, float %2426)  ; FAbs(value)
  %2430 = fadd fast float %2405, 1.000000e+00
  %2431 = fadd fast float %2408, 1.000000e+00
  %2432 = fadd fast float %2411, 1.000000e+00
  %2433 = fcmp fast ogt float %2427, %2430
  %2434 = fcmp fast ogt float %2428, %2431
  %2435 = fcmp fast ogt float %2429, %2432
  %2436 = or i1 %2433, %2434
  %2437 = or i1 %2436, %2435
  br i1 %2437, label %2438, label %2451

; <label>:2438                                    ; preds = %2392
  %2439 = fadd fast float %1841, %1840
  %2440 = fadd fast float %59, %60
  %2441 = fadd fast float %2439, %1842
  %2442 = fadd fast float %2440, %61
  %2443 = fmul fast float %2441, 0x3F52E83A20000000
  %2444 = fmul fast float %2442, 0x40A2E83A20000000
  %2445 = call float @dx.op.unary.f32(i32 22, float %2444)  ; Frc(value)
  %2446 = fadd fast float %2445, %2443
  %2447 = call float @dx.op.unary.f32(i32 22, float %2446)  ; Frc(value)
  %2448 = fcmp fast ogt float %2447, 5.000000e-01
  %2449 = uitofp i1 %2448 to float
  %2450 = fsub fast float 1.000000e+00, %2449
  br label %2459

; <label>:2451                                    ; preds = %2392
  %2452 = fcmp fast ogt float %2414, 0.000000e+00
  br i1 %2452, label %2453, label %2459

; <label>:2453                                    ; preds = %2451
  %2454 = fsub fast float -0.000000e+00, %2414
  %2455 = call float @dx.op.unary.f32(i32 6, float %2454)  ; FAbs(value)
  %2456 = fmul fast float %2455, 2.000000e+01
  %2457 = call float @dx.op.unary.f32(i32 7, float %2456)  ; Saturate(value)
  %2458 = fsub fast float 1.000000e+00, %2457
  br label %2459

; <label>:2459                                    ; preds = %2453, %2451, %2438, %2323
  %2460 = phi float [ %2450, %2438 ], [ %2458, %2453 ], [ %2386, %2451 ], [ %2386, %2323 ]
  %2461 = phi float [ 1.000000e+00, %2438 ], [ 0.000000e+00, %2453 ], [ %2387, %2451 ], [ %2387, %2323 ]
  %2462 = phi float [ %2449, %2438 ], [ %2458, %2453 ], [ %2388, %2451 ], [ %2388, %2323 ]
  %2463 = fadd fast float %2460, %2383
  %2464 = fadd fast float %2461, %2384
  %2465 = fadd fast float %2462, %2385
  %2466 = fmul fast float %53, 7.812500e-03
  %2467 = fmul fast float %54, 7.812500e-03
  %2468 = call float @dx.op.unary.f32(i32 22, float %2466)  ; Frc(value)
  %2469 = call float @dx.op.unary.f32(i32 22, float %2467)  ; Frc(value)
  %2470 = fmul fast float %2468, 1.280000e+02
  %2471 = fmul fast float %2469, 1.280000e+02
  %2472 = fadd fast float %2470, 0xC05015CCC0000000
  %2473 = fadd fast float %2471, 0xC0521DCCC0000000
  %2474 = fmul fast float %2472, %2472
  %2475 = fmul fast float %2473, %2473
  %2476 = fmul fast float %2473, %2472
  %2477 = call float @dx.op.dot3.f32(i32 55, float %2474, float %2475, float %2476, float 0x4034640000000000, float 0x404E5A0000000000, float 0x40036CCAA0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %2478 = call float @dx.op.unary.f32(i32 22, float %2477)  ; Frc(value)
  %2479 = fadd fast float %2478, -5.000000e-01
  %2480 = fmul fast float %2479, 0x3F70101020000000
  %2481 = fmul fast float %2226, 5.000000e-01
  %2482 = fmul fast float %2227, 5.000000e-01
  %2483 = fmul fast float %2228, 5.000000e-01
  %2484 = fadd fast float %2481, 5.000000e-01
  %2485 = fadd fast float %2482, 5.000000e-01
  %2486 = fadd fast float %2483, 5.000000e-01
  %2487 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %2488 = extractvalue %dx.types.CBufRet.f32 %2487, 2
  %2489 = fmul fast float %2488, %2463
  %2490 = fmul fast float %2488, %2464
  %2491 = fmul fast float %2488, %2465
  %2492 = call float @dx.op.binary.f32(i32 36, float %2489, float 3.225600e+04)  ; FMin(a,b)
  %2493 = call float @dx.op.binary.f32(i32 36, float %2490, float 3.225600e+04)  ; FMin(a,b)
  %2494 = call float @dx.op.binary.f32(i32 36, float %2491, float 3.225600e+04)  ; FMin(a,b)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %2492)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %2493)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %2494)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %2484)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %2485)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %2486)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %2242)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %2232)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %2233)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %2234)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float 0x3FE0303040000000)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %2229)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %2230)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %2231)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %2480)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %2324)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float, float, float, float, float, float, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!60}
!dx.entryPoints = !{!61}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"ps", i32 6, i32 6}
!4 = !{!5, null, !36, !41}
!5 = !{!6, !8, !10, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35}
!6 = !{i32 0, %"class.Texture3D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 5}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 12, i32 0, !11}
!11 = !{i32 1, i32 16}
!12 = !{i32 3, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 12, i32 0, !11}
!13 = !{i32 4, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i32 0, !9}
!14 = !{i32 5, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 2, i32 0, !9}
!15 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !9}
!16 = !{i32 7, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 7, i32 1, i32 11, i32 0, null}
!17 = !{i32 8, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 8, i32 1, i32 11, i32 0, null}
!18 = !{i32 9, %"class.Texture2D<unsigned long long>"* undef, !"", i32 0, i32 9, i32 1, i32 2, i32 0, !7}
!19 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !9}
!20 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !9}
!21 = !{i32 12, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 2, i32 0, !9}
!22 = !{i32 13, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !9}
!23 = !{i32 14, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 2, i32 0, !9}
!24 = !{i32 15, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 2, i32 0, !9}
!25 = !{i32 16, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 16, i32 1, i32 2, i32 0, !9}
!26 = !{i32 17, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 17, i32 1, i32 2, i32 0, !9}
!27 = !{i32 18, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 18, i32 1, i32 2, i32 0, !9}
!28 = !{i32 19, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 19, i32 1, i32 2, i32 0, !9}
!29 = !{i32 20, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 20, i32 1, i32 2, i32 0, !9}
!30 = !{i32 21, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 21, i32 1, i32 2, i32 0, !9}
!31 = !{i32 22, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 22, i32 1, i32 2, i32 0, !9}
!32 = !{i32 23, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 23, i32 1, i32 2, i32 0, !9}
!33 = !{i32 24, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 24, i32 1, i32 2, i32 0, !9}
!34 = !{i32 25, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 25, i32 1, i32 2, i32 0, !9}
!35 = !{i32 26, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 26, i32 1, i32 2, i32 0, !9}
!36 = !{!37, !38, !39, !40}
!37 = !{i32 0, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 0, i32 1, i32 5484, null}
!38 = !{i32 1, %UniformBufferConstants_Scene* undef, !"", i32 0, i32 1, i32 1, i32 56, null}
!39 = !{i32 2, %UniformBufferConstants_Nanite* undef, !"", i32 0, i32 2, i32 1, i32 188, null}
!40 = !{i32 3, %UniformBufferConstants_Material* undef, !"", i32 0, i32 3, i32 1, i32 428, null}
!41 = !{!42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59}
!42 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!43 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!44 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!45 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!46 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!47 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 5, i32 1, i32 0, null}
!48 = !{i32 6, %struct.SamplerState* undef, !"", i32 0, i32 6, i32 1, i32 0, null}
!49 = !{i32 7, %struct.SamplerState* undef, !"", i32 0, i32 7, i32 1, i32 0, null}
!50 = !{i32 8, %struct.SamplerState* undef, !"", i32 0, i32 8, i32 1, i32 0, null}
!51 = !{i32 9, %struct.SamplerState* undef, !"", i32 0, i32 9, i32 1, i32 0, null}
!52 = !{i32 10, %struct.SamplerState* undef, !"", i32 0, i32 10, i32 1, i32 0, null}
!53 = !{i32 11, %struct.SamplerState* undef, !"", i32 0, i32 11, i32 1, i32 0, null}
!54 = !{i32 12, %struct.SamplerState* undef, !"", i32 0, i32 12, i32 1, i32 0, null}
!55 = !{i32 13, %struct.SamplerState* undef, !"", i32 0, i32 13, i32 1, i32 0, null}
!56 = !{i32 14, %struct.SamplerState* undef, !"", i32 0, i32 14, i32 1, i32 0, null}
!57 = !{i32 15, %struct.SamplerState* undef, !"", i32 0, i32 15, i32 1, i32 0, null}
!58 = !{i32 16, %struct.SamplerState* undef, !"", i32 0, i32 16, i32 1, i32 0, null}
!59 = !{i32 17, %struct.SamplerState* undef, !"", i32 0, i32 17, i32 1, i32 0, null}
!60 = !{[10 x i32] [i32 8, i32 24, i32 0, i32 0, i32 0, i32 0, i32 1112055, i32 1112055, i32 0, i32 1078391]}
!61 = !{void ()* @MainPS, !"MainPS", !62, !4, !81}
!62 = !{!63, !70, null}
!63 = !{!64, !66, !67, !69}
!64 = !{i32 0, !"PACKED_VIEW_INDEX", i8 5, i8 0, !65, i8 1, i32 1, i8 1, i32 0, i8 0, null}
!65 = !{i32 0}
!66 = !{i32 1, !"MACRO_TILE_INDEX", i8 5, i8 0, !65, i8 1, i32 1, i8 1, i32 0, i8 1, null}
!67 = !{i32 2, !"SV_Position", i8 9, i8 3, !65, i8 4, i32 1, i8 4, i32 1, i8 0, !68}
!68 = !{i32 3, i32 11}
!69 = !{i32 3, !"SV_IsFrontFace", i8 5, i8 13, !65, i8 1, i32 1, i8 1, i32 0, i8 2, null}
!70 = !{!71, !73, !75, !77, !79}
!71 = !{i32 0, !"SV_Target", i8 9, i8 16, !65, i8 0, i32 1, i8 4, i32 0, i8 0, !72}
!72 = !{i32 3, i32 15}
!73 = !{i32 1, !"SV_Target", i8 9, i8 16, !74, i8 0, i32 1, i8 4, i32 1, i8 0, !72}
!74 = !{i32 1}
!75 = !{i32 2, !"SV_Target", i8 9, i8 16, !76, i8 0, i32 1, i8 4, i32 2, i8 0, !72}
!76 = !{i32 2}
!77 = !{i32 3, !"SV_Target", i8 9, i8 16, !78, i8 0, i32 1, i8 4, i32 3, i8 0, !72}
!78 = !{i32 3}
!79 = !{i32 4, !"SV_Target", i8 9, i8 16, !80, i8 0, i32 1, i8 4, i32 5, i8 0, !72}
!80 = !{i32 5}
!81 = !{i32 0, i64 16, i32 5, !65}
!82 = distinct !{!82, !"dx.controlflow.hints", i32 1}
!83 = distinct !{!83, !"dx.controlflow.hints", i32 1}
!84 = distinct !{!84, !"dx.controlflow.hints", i32 1}
!85 = distinct !{!85, !"dx.controlflow.hints", i32 1}
!86 = distinct !{!86, !"dx.controlflow.hints", i32 2}
!87 = distinct !{!87, !"dx.controlflow.hints", i32 1}
!88 = distinct !{!88, !"dx.controlflow.hints", i32 1}
